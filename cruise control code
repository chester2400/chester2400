





///////////////////////////////last eprom used 211///////////////////
//      digital pin 32 to be used for relay control of soervo power suply.



#include <EEPROM.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <PID_v1.h>
#include <Servo.h>
#include <avr/pgmspace.h>
#include <SPI.h>
//#include <SD.h>
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
//#define OLED_RESET     10 // Reset pin # (or -1 if sharing Arduino reset pin)
//#define OLED_CS     255 
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

//#include <Adafruit_NeoPixel.h>
//#ifdef __AVR__
//  #include <avr/power.h>
//#endif
//#define PIN        10
//#define NUMPIXELS 5

//Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);




Servo myServo;
// array for menu
const char string_0[] PROGMEM = "Setspeed/decel: "; 
const char string_1[] PROGMEM = "Cancel/accel: ";
const char string_2[] PROGMEM = "Brake: ";
const char string_3[] PROGMEM = "SPEED: ";
const char string_4[] PROGMEM = "ON";
const char string_5[] PROGMEM = "OFF";
const char string_6[] PROGMEM = " Set PID "; 
const char string_7[] PROGMEM = "low";
const char string_8[] PROGMEM = "high";
const char string_9[] PROGMEM = ">Proportional ";
const char string_10[] PROGMEM = " Proportional ";
const char string_11[] PROGMEM = ">Integral ";
const char string_12[] PROGMEM = " Integral "; 
const char string_13[] PROGMEM = ">Derivative ";
const char string_14[] PROGMEM = " Derivative ";
const char string_15[] PROGMEM = "STORED";
const char string_16[] PROGMEM = ">Set PID ";
const char string_17[] PROGMEM = " Speed sensor";
const char string_18[] PROGMEM = ">Speed sensor";
const char string_19[] PROGMEM = "   SETUP";
const char string_20[] PROGMEM = " Pulses per";
const char string_21[] PROGMEM = " revolution: ";
const char string_22[] PROGMEM = "quickshiter: ";
const char string_23[] PROGMEM = " shift time: ";
const char string_24[] PROGMEM = ">shift time: ";
const char string_25[] PROGMEM = "RPM: ";
const char string_26[] PROGMEM = " set gear rato";
const char string_27[] PROGMEM = ">set gear rato";
const char string_28[] PROGMEM = " Gear display: ";
const char string_29[] PROGMEM = ">Gear display: ";
const char string_30[] PROGMEM = " Display gear ratio";
const char string_31[] PROGMEM = ">Display gear ratio";
const char string_32[] PROGMEM = "1st gear: ";
const char string_33[] PROGMEM = "2nd gear: ";
const char string_34[] PROGMEM = "3ed gear: ";
const char string_35[] PROGMEM = "4th gear: ";
const char string_36[] PROGMEM = "5th gear: ";
const char string_37[] PROGMEM = "6th gear: ";
const char string_38[] PROGMEM = " Shiftlight setup ";
const char string_39[] PROGMEM = " Start RPM ";
const char string_40[] PROGMEM = " End RPM ";
const char string_41[] PROGMEM = " Shiftlight: ";
const char string_42[] PROGMEM = ">Shiftlight setup ";
const char string_43[] PROGMEM = ">Start RPM ";
const char string_44[] PROGMEM = ">End RPM ";
const char string_45[] PROGMEM = ">Shiftlight: ";
const char string_46[] PROGMEM = " set general QS time";
const char string_47[] PROGMEM = " set gear 1 QS time";
const char string_48[] PROGMEM = " set gear 2> QS time";
const char string_49[] PROGMEM = ">set general QS time";
const char string_50[] PROGMEM = ">set gear 1 QS time";
const char string_51[] PROGMEM = ">set gear 2> QS time";
const char string_52[] PROGMEM = " 0-2k rpm QS time";
const char string_53[] PROGMEM = " 3K rpm QS time";
const char string_54[] PROGMEM = " 6k rpm QS time";
const char string_55[] PROGMEM = " 9k rpm QS time"; 
const char string_56[] PROGMEM = " 12k rpm QS time";
const char string_57[] PROGMEM = ">0 - 2k rpm QS time";
const char string_58[] PROGMEM = ">3K rpm QS time";
const char string_59[] PROGMEM = ">6k rpm QS time";
const char string_60[] PROGMEM = ">9k rpm QS time"; 
const char string_61[] PROGMEM = ">12k rpm QS time";
const char string_62[] PROGMEM = ">restore defaults"; 
const char string_63[] PROGMEM = " restore defaults";
const char string_64[] PROGMEM = "DEFAULTS RESTORED";
const char string_65[] PROGMEM = ">set curent sensor";
const char string_66[] PROGMEM = " set curent sensor";
const char string_67[] PROGMEM = " TPS input";
const char string_68[] PROGMEM = ">TPS input";
const char string_69[] PROGMEM = ">curent sensor: ";
const char string_70[] PROGMEM = " curent sensor: ";
const char string_71[] PROGMEM = ">set sensor offset";
const char string_72[] PROGMEM = " set sensor offset";
const char string_73[] PROGMEM = ">tps input: ";
const char string_74[] PROGMEM = " tps input: ";
const char string_75[] PROGMEM = " set throtle levels";
const char string_76[] PROGMEM = ">set throtle levels";
const char string_77[] PROGMEM = " 40";
const char string_78[] PROGMEM = " 80";
const char string_79[] PROGMEM = " 120";
const char string_80[] PROGMEM = " 160";
const char string_81[] PROGMEM = ">set speed muliplier";
const char string_82[] PROGMEM = " set speed muliplier";
const char string_83[] PROGMEM = ">set low speed";
const char string_84[] PROGMEM = " set low speed";
const char string_85[] PROGMEM = ">set medium speed";
const char string_86[] PROGMEM = " set medium speed";
const char string_87[] PROGMEM = ">set high speed";
const char string_88[] PROGMEM = " set high speed";




const char *const string_table[] PROGMEM = {string_0, string_1, string_2, string_3, string_4, string_5,string_6, string_7, string_8, string_9, string_10, string_11,string_12, string_13, string_14, string_15, string_16, string_17, string_18, string_19, string_20, string_21, string_22, string_23, string_24, string_25, string_26, string_27, string_28, string_29, string_30, string_31, string_32, string_33, string_34, string_35, string_36, string_37, string_38, string_39, string_40, string_41, string_42, string_43, string_44, string_45, string_46, string_47, string_48, string_49, string_50, string_51, string_52, string_53, string_54, string_55, string_56, string_57, string_58, string_59, string_60, string_61, string_62, string_63, string_64, string_65, string_66, string_67, string_68, string_69, string_70, string_71, string_72, string_73, string_74, string_75, string_76, string_77, string_78, string_79, string_80, string_81, string_82, string_83, string_84, string_85, string_86, string_87, string_88};


char buffer[25];


static const unsigned char PROGMEM Logo [] = { 
0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF8, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xE0, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00,
0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00,
0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00,
0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80,
0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x07, 0xF3, 0xFF, 0xFF, 0xFF, 0xF7, 0xFB, 0xC0,
0x07, 0xEF, 0xFF, 0xFF, 0xFD, 0xEF, 0xFB, 0xE0, 0x0F, 0xDF, 0xFC, 0xFF, 0xFD, 0x6F, 0xF3, 0xE0,
0x0F, 0xDE, 0xFD, 0xFF, 0xFD, 0x6F, 0xF7, 0xF0, 0x1F, 0xBE, 0xCD, 0x0F, 0xB9, 0x52, 0xC7, 0xF0,
0x1F, 0xBE, 0x15, 0x0F, 0x39, 0x8A, 0x4F, 0xF0, 0x1F, 0xBC, 0x32, 0x6F, 0xB9, 0x00, 0x0F, 0xF0,
0x1F, 0xC5, 0x20, 0x6F, 0xBB, 0xA0, 0xA7, 0xF8, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xF8,
0x3E, 0x3C, 0xE0, 0xF3, 0xE1, 0x83, 0xF8, 0xF8, 0x3C, 0x98, 0x60, 0x71, 0xC5, 0x8B, 0xF0, 0x78,
0x39, 0xF8, 0x62, 0x71, 0xCF, 0x9F, 0xE7, 0x38, 0x39, 0xFA, 0x62, 0x60, 0x8F, 0x87, 0xEF, 0x9C,
0x39, 0xFA, 0x60, 0xEC, 0x8F, 0x8F, 0xCF, 0x98, 0x39, 0x10, 0x20, 0xE0, 0x88, 0x9F, 0xEF, 0x9C,
0x39, 0x92, 0x22, 0x6C, 0xC9, 0x9F, 0xE7, 0x38, 0x3C, 0x93, 0x22, 0x0C, 0x41, 0x83, 0xF0, 0x78,
0x3E, 0x37, 0x37, 0x4E, 0x61, 0x83, 0xFF, 0xF8, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8,
0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0,
0x1F, 0xEC, 0x51, 0x52, 0xF1, 0x4D, 0x6F, 0xF0, 0x0F, 0xE4, 0x59, 0x32, 0x71, 0x6B, 0x6F, 0xF0,
0x0F, 0xE3, 0x59, 0x33, 0x3D, 0x71, 0x6F, 0xF0, 0x0F, 0xFB, 0xDF, 0xDF, 0xFF, 0xFF, 0xEF, 0xE0,
0x07, 0xFE, 0xE9, 0x75, 0x59, 0xCE, 0xFF, 0xE0, 0x07, 0xFC, 0x90, 0x34, 0x01, 0x81, 0xFF, 0xC0,
0x03, 0xFC, 0x51, 0x31, 0x21, 0xD1, 0xFF, 0xC0, 0x03, 0xFD, 0xCA, 0x55, 0x4B, 0xDA, 0xFF, 0x80,
0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
0x00, 0xFF, 0xC0, 0x01, 0x54, 0x87, 0xFE, 0x00, 0x00, 0x7F, 0xC0, 0x21, 0x54, 0x87, 0xFC, 0x00,
0x00, 0x3F, 0xC0, 0x21, 0x54, 0x87, 0xF8, 0x00, 0x00, 0x1F, 0xC0, 0x01, 0x54, 0x07, 0xF0, 0x00,
0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00,
0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00,
0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xE0, 0x00, 0x00,
0x00, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
};

static const unsigned char PROGMEM Ready [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0x87, 0xF8, 0x60, 0x66, 0x1F, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x3F, 0xC7, 0xFC, 0x60, 0x66, 0x3F, 0x8F, 0xF8, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x30, 0xE6, 0x0E, 0x60, 0x66, 0x61, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x60, 0x46, 0x06, 0x60, 0x66, 0x60, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x0E, 0x60, 0x66, 0x78, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x60, 0x07, 0xFC, 0x60, 0x66, 0x3F, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x60, 0x07, 0xF0, 0x60, 0x66, 0x0F, 0x8F, 0xF8, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x60, 0x06, 0x38, 0x60, 0x66, 0x01, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x60, 0x46, 0x1C, 0x60, 0x66, 0x60, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x30, 0xE6, 0x0C, 0x70, 0xE6, 0x71, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x3F, 0xC6, 0x0E, 0x3F, 0xC6, 0x3F, 0x8F, 0xF8, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0x86, 0x07, 0x1F, 0x86, 0x1F, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xF8, 0x0F, 0x06, 0x06, 0xFF, 0xDF, 0xE0, 0x3C, 0x18, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0xC7, 0x06, 0xFF, 0xDF, 0xF0, 0xFF, 0x18, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x0E, 0x30, 0xC7, 0x86, 0x0C, 0x18, 0x38, 0xC3, 0x18, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x04, 0x60, 0x67, 0x86, 0x0C, 0x18, 0x19, 0x81, 0x98, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x00, 0x60, 0x66, 0xC6, 0x0C, 0x18, 0x39, 0x81, 0x98, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x00, 0x60, 0x66, 0x66, 0x0C, 0x1F, 0xF1, 0x81, 0x98, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x00, 0x60, 0x66, 0x66, 0x0C, 0x1F, 0xC1, 0x81, 0x98, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x00, 0x60, 0x66, 0x36, 0x0C, 0x18, 0xE1, 0x81, 0x98, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x04, 0x60, 0x66, 0x1E, 0x0C, 0x18, 0x71, 0x81, 0x98, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0x0E, 0x30, 0xC6, 0x1E, 0x0C, 0x18, 0x30, 0xC3, 0x18, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0xFC, 0x3F, 0xC6, 0x0E, 0x0C, 0x18, 0x38, 0xFF, 0x1F, 0xE0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xF8, 0x0F, 0x06, 0x06, 0x0C, 0x18, 0x1C, 0x3C, 0x1F, 0xE0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x7F, 0xC1, 0xC1, 0xFC, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x7F, 0xC1, 0xC1, 0xFF, 0x38, 0x70, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x06, 0x0E, 0x60, 0x03, 0x61, 0x83, 0x18, 0x60, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x60, 0x03, 0x61, 0x81, 0x8C, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x06, 0x0E, 0x60, 0x03, 0x61, 0x81, 0x8C, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x7F, 0xC6, 0x31, 0x81, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x7F, 0xC6, 0x31, 0x81, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x06, 0x38, 0x60, 0x07, 0xF1, 0x81, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x06, 0x1C, 0x60, 0x0F, 0xF9, 0x81, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x06, 0x0C, 0x60, 0x0C, 0x19, 0x83, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x06, 0x0E, 0x7F, 0xCC, 0x19, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x06, 0x07, 0x7F, 0xD8, 0x0D, 0xFC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};





static const unsigned char PROGMEM qson []={
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0xE0, 0xC0, 0xCC, 0x1F, 0x0C, 0x0C, 0x3E, 0x18, 0x19, 0x9F, 0xE7, 0xFD, 0xFF, 0xBF, 0xC0,
0x07, 0xF8, 0xC0, 0xCC, 0x7F, 0x8C, 0x18, 0x7F, 0x18, 0x19, 0x9F, 0xE7, 0xFD, 0xFF, 0xBF, 0xE0,
0x06, 0x18, 0xC0, 0xCC, 0x61, 0xCC, 0x30, 0xC3, 0x98, 0x19, 0x98, 0x06, 0x00, 0x18, 0x30, 0x70,
0x0C, 0x0C, 0xC0, 0xCC, 0xC0, 0x8C, 0x60, 0xC1, 0x98, 0x19, 0x98, 0x06, 0x00, 0x18, 0x30, 0x30,
0x0C, 0x0C, 0xC0, 0xCC, 0xC0, 0x0C, 0xC0, 0xF0, 0x18, 0x19, 0x98, 0x06, 0x00, 0x18, 0x30, 0x70,
0x0C, 0x0C, 0xC0, 0xCC, 0xC0, 0x0D, 0xE0, 0x7E, 0x1F, 0xF9, 0x9F, 0xC7, 0xFC, 0x18, 0x3F, 0xE0,
0x0C, 0x0C, 0xC0, 0xCC, 0xC0, 0x0F, 0x60, 0x1F, 0x1F, 0xF9, 0x9F, 0xC7, 0xFC, 0x18, 0x3F, 0x80,
0x0C, 0x0C, 0xC0, 0xCC, 0xC0, 0x0E, 0x30, 0x03, 0x98, 0x19, 0x98, 0x06, 0x00, 0x18, 0x31, 0xC0,
0x0C, 0xCC, 0xC0, 0xCC, 0xC0, 0x8C, 0x30, 0xC1, 0x98, 0x19, 0x98, 0x06, 0x00, 0x18, 0x30, 0xE0,
0x06, 0x78, 0xE1, 0xCC, 0x61, 0xCC, 0x18, 0xE3, 0x98, 0x19, 0x98, 0x06, 0x00, 0x18, 0x30, 0x60,
0x07, 0xF8, 0x7F, 0x8C, 0x7F, 0x8C, 0x1C, 0x7F, 0x18, 0x19, 0x98, 0x07, 0xFC, 0x18, 0x30, 0x70,
0x01, 0xD8, 0x3F, 0x0C, 0x1F, 0x0C, 0x0C, 0x3E, 0x18, 0x19, 0x98, 0x07, 0xFC, 0x18, 0x30, 0x38,
0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF8, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x78, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x3C, 0xFC, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1C, 0xEC, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1C, 0xEE, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1C, 0xE6, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x1C, 0xE7, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x3C, 0xE3, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x78, 0xE3, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF8, 0xE1, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF0, 0xE1, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  
};


static const unsigned char PROGMEM qsoff []={
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0xE0, 0xC0, 0xCC, 0x1F, 0x0C, 0x0C, 0x3E, 0x18, 0x19, 0x9F, 0xE7, 0xFD, 0xFF, 0xBF, 0xC0,
0x07, 0xF8, 0xC0, 0xCC, 0x7F, 0x8C, 0x18, 0x7F, 0x18, 0x19, 0x9F, 0xE7, 0xFD, 0xFF, 0xBF, 0xE0,
0x06, 0x18, 0xC0, 0xCC, 0x61, 0xCC, 0x30, 0xC3, 0x98, 0x19, 0x98, 0x06, 0x00, 0x18, 0x30, 0x70,
0x0C, 0x0C, 0xC0, 0xCC, 0xC0, 0x8C, 0x60, 0xC1, 0x98, 0x19, 0x98, 0x06, 0x00, 0x18, 0x30, 0x30,
0x0C, 0x0C, 0xC0, 0xCC, 0xC0, 0x0C, 0xC0, 0xF0, 0x18, 0x19, 0x98, 0x06, 0x00, 0x18, 0x30, 0x70,
0x0C, 0x0C, 0xC0, 0xCC, 0xC0, 0x0D, 0xE0, 0x7E, 0x1F, 0xF9, 0x9F, 0xC7, 0xFC, 0x18, 0x3F, 0xE0,
0x0C, 0x0C, 0xC0, 0xCC, 0xC0, 0x0F, 0x60, 0x1F, 0x1F, 0xF9, 0x9F, 0xC7, 0xFC, 0x18, 0x3F, 0x80,
0x0C, 0x0C, 0xC0, 0xCC, 0xC0, 0x0E, 0x30, 0x03, 0x98, 0x19, 0x98, 0x06, 0x00, 0x18, 0x31, 0xC0,
0x0C, 0xCC, 0xC0, 0xCC, 0xC0, 0x8C, 0x30, 0xC1, 0x98, 0x19, 0x98, 0x06, 0x00, 0x18, 0x30, 0xE0,
0x06, 0x78, 0xE1, 0xCC, 0x61, 0xCC, 0x18, 0xE3, 0x98, 0x19, 0x98, 0x06, 0x00, 0x18, 0x30, 0x60,
0x07, 0xF8, 0x7F, 0x8C, 0x7F, 0x8C, 0x1C, 0x7F, 0x18, 0x19, 0x98, 0x07, 0xFC, 0x18, 0x30, 0x70,
0x01, 0xD8, 0x3F, 0x0C, 0x1F, 0x0C, 0x0C, 0x3E, 0x18, 0x19, 0x98, 0x07, 0xFC, 0x18, 0x30, 0x38,
0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x1F, 0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x1F, 0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0x1F, 0xF9, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8F, 0x1C, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x07, 0x9C, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x03, 0x9F, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x03, 0x9F, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x03, 0x9F, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x03, 0x9C, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x07, 0x9C, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8F, 0x1C, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0x1C, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x1C, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x1C, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  
};




static const unsigned char PROGMEM cruise [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0xFF, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x07, 0xFF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x07, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x03, 0xFF, 0xF0, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0xFF, 0xF0, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x3F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x7F, 0xF1, 0xFF, 0x83, 0xC3, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFF, 0xF3, 0xFC, 0x03, 0xC0, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFF, 0xF7, 0xF0, 0x03, 0xC0, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x03, 0xC0, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x03, 0xC0, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x03, 0xC0, 0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x01, 0x80, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x00, 0x00, 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xFB, 0xF0, 0x00, 0x00, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0xF1, 0xF8, 0x00, 0x00, 0x3F, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0xF0, 0x00, 0x00, 0x3F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x66, 0x00, 0x00, 0x3C, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x0F, 0x00, 0x00, 0x18, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x0F, 0x80, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x0F, 0xC0, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x07, 0xE0, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x03, 0xF0, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x01, 0xF8, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x00, 0xFC, 0x00, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x7F, 0xE0, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x00, 0x3F, 0xE0, 0x00, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x00, 0x1F, 0xF0, 0x01, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x00, 0x1F, 0xF0, 0x01, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x03, 0x80, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x00, 0x00, 0x00, 0x0E, 0x0F, 0x80, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0xE0, 0x70, 0x00, 0x00, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0xF0, 0x00, 0x00, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0xF9, 0xF0, 0x00, 0x00, 0x1F, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xFB, 0xF0, 0x00, 0x00, 0x0F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE0, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x03, 0x80, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x03, 0xC0, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x07, 0xC0, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x07, 0xC0, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x07, 0xC0, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x07, 0xC0, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xC7, 0xC7, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



static const unsigned char PROGMEM gear1 [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFB, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF3, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE3, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


static const unsigned char PROGMEM gear2 [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char PROGMEM gear3 [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x7F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xE0, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF0, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF0, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFC, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char PROGMEM gear4 [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char PROGMEM gear5 [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFE, 0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x03, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF0, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFE, 0x0F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char PROGMEM gear6 [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF1, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF7, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xEF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFE, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x03, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xF8, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x07, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const unsigned char PROGMEM gearN [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC0, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFC, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x80, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xC0, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xC0, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xE0, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xBF, 0xE0, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x9F, 0xF0, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x9F, 0xF8, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x8F, 0xF8, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x8F, 0xFC, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x87, 0xFE, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x83, 0xFE, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x83, 0xFF, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x81, 0xFF, 0x7F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x7F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x7F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x3F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x1F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x1F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x0F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x0F, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x07, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x03, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x03, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x01, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};























//byte standelta;
//byte brake;

//byte testbyte:

double angle;   // variable to hold the angle for the servo motor
//double spd;

//const int chipSelect = 10;

//////////////////////////////////////QS///////////////////////////
unsigned long previousMillisQS = 0;     // QS
unsigned long shifttime = 100;// QS
const long shiftinterval = 700;
byte QSsensor;
byte shifting = 0;
byte shiftready = 1;
int relay = A0;
byte QSon = 0;
unsigned long previousMillisQS1 = 0;
unsigned long licznikQS = 0;
int licznikeeprom = 85;
byte QSchange = 0;

unsigned long shifttimearray[3][5] = { {160,140,120,110,100}, {160,140,120,110,100}, {130,120,120,110,100}};
int Xrpm;
int Xrpm1;
int xr1;
int xr2;
int S1;
int S2;
byte QSgear;
double shifttest;

/////////////////////////QS end////////////////////////
//////////////////////tps///////////
int tpsraw;   //A3
int tps;
int tpsmin;
int tpsmax;
byte tpsspeedarray[5] = {0,0,0,0,0};
int tpsanglearray[5] = {0,0,0,0,0};
byte xtps1 = 0;
byte xtps2 = 1;
byte xt1;
byte xt2;
byte xpredkosc1 = 0;
byte xpredkosc2 = 1;
byte xp1;
byte xp2;

byte T1;
byte T2;

byte P1;
byte P2;

int desiredangle;


byte desiredtps;

byte speed0 = 0;
byte speed1;
byte speed2;
byte speed3;
byte speed4;

byte curentlicznik1 = 172;
byte tpsvsanglesetup = 0;
byte speedvstpssetup = 0;
byte speedvstpssetupON = 0;
byte tpssetupcomplited = 0;
byte tpsinput = 0;
byte speed1set = 0;
byte speed2set = 0;
byte speed3set = 0;
byte speed4set = 0;

byte tpslicznik = 186;
const int servorelay = 32;       //D32
byte relayON = 0;
unsigned long previousMillis11 = 0;
const long interval11 = 500;



///////////////////tps end/////////////

unsigned long previousMillis = 0;   // do czekania w pentli
unsigned long previousMillis1 = 0;
unsigned long previousMillis2 = 0;
unsigned long previousMillis3 = 0;
unsigned long previousMillis5 = 0;
unsigned long previousMillis6 = 0;
//unsigned long previousMillis7 = 0;
// constants won't change:
const long interval5 = 100;
const long interval = 500;               // do czekania w pentli zapisu na sd
const long interval2 = 700;   //  debounce do przyciskow
const long interval3 = 3;   // opoznienie serwa
const long interval6 = 200;
//const long interval7 = 1000;
unsigned long prevmicros;
unsigned long currmicros;
unsigned long czas;
//double predkosc1;
//double predkosc2;
//double predkosc3;
long interval4 = 250;   // predkosc dzialania pid bedzie sterowane pontencometrem
const long intervalprzyciski = 100;
unsigned long prevprzyciski = 0;
byte PrevLPsetspeed = 0;
byte PrevLPcancel = 0;






float wheeldiameter = 2.068;
byte PulsesPerRevolution = 49;
byte PulsesPerRevolutionRPM = 22;  
const unsigned long ZeroTimeout = 100000;
const unsigned long ZeroTimeoutRPM = 100000;   
// Calibration for smoothing RPM:
const byte numReadings = 3;  
const byte numReadingsRPM = 3;
volatile unsigned long LastTimeWeMeasured;  
volatile unsigned long LastTimeWeMeasuredRPM;
volatile unsigned long LastTimeWeMeasuredRPM1;
volatile unsigned long PeriodBetweenPulses = ZeroTimeout+1000;
volatile unsigned long PeriodBetweenPulsesRPM = ZeroTimeoutRPM+1000;
volatile unsigned long PeriodBetweenPulsesRPM1 = ZeroTimeoutRPM+1000;                     
volatile unsigned long PeriodAverage = ZeroTimeout+1000; 
volatile unsigned long PeriodAverageRPM = ZeroTimeoutRPM+1000; 
volatile unsigned long prevperiod;
//volatile unsigned long prevperiodRPM = 1000;                         
unsigned long FrequencyRaw;  
unsigned long FrequencyRawRPM;
unsigned long FrequencyReal;  
unsigned long FrequencyRealRPM;
unsigned long RPM;
unsigned long RPMRPM; 
unsigned int PulseCounter = 1; 
unsigned int PulseCounterRPM = 1; 
unsigned long PeriodSum; 
unsigned long PeriodSumRPM;
unsigned long LastTimeCycleMeasure = LastTimeWeMeasured;  
unsigned long LastTimeCycleMeasureRPM = LastTimeWeMeasuredRPM;      ///   poprzenio bylo bez rpm
unsigned long CurrentMicros = micros();  
unsigned long CurrentMicrosRPM = micros();
unsigned int AmountOfReadings = 1;
unsigned int AmountOfReadingsRPM = 1;
unsigned int ZeroDebouncingExtra;  
unsigned int ZeroDebouncingExtraRPM;
// Variables for smoothing tachometer:
unsigned long readings[numReadings]; 
unsigned long readingsRPM[numReadingsRPM]; 
unsigned long readIndex;  
unsigned long readIndexRPM; 
unsigned long total;  
unsigned long totalRPM; 
unsigned long average; 
unsigned long averageRPM; 
int averageRPM1;
//volatile byte NrOfTeeth = 17;
//volatile byte UpdatedNrOfTeeth;
//volatile byte TeethCounter;

//const byte numReadings2 = 3;
//unsigned long readings2[numReadings2]; 
//unsigned long readIndex2;  
//unsigned long total2;  
//unsigned long average2; 
//unsigned long gearRatioAverage;

byte gear1setup;
byte gear2setup;
byte gear3setup;
byte gear4setup;
byte gear5setup;
byte gear6setup;
byte gearRatioSet;
//byte ledsoff;
byte blinkon = 0;



double multi;
double multilow = 0.53;
double multimid = 0.55;
double multihigh = 0.7;



byte manualspeedup;
byte manualspeeddown;
int const setspeed = 5;    //przyciski do tempomatu
int const cancel = 6;
int const hamulec = 7;  // bylo 2
//int napiecie = A1;
byte stansetspeed;
byte stancancel;
byte stantemp;
byte stanham;
//int pot1 = A5;    //czerwony
//int pot2 = A3;  //szary
//int pot3 = A4;  //biały
//int pot4 = A0;  //niebieski
//int pot5 = A2;  //zolty
int servosweepup;
int servosweepdown;
double delta;
double actualspeed;
double prevspeed;
int modyfikator;
volatile unsigned long licznik = 0; 

volatile unsigned long licznik1 = 0; 

double predkosc;
byte lowspeed;
byte highspeed;
byte zmiana;
//int czaskodu;
 
int ledPin = 8;           //   bylo 3
int ledpin2 = 4;   // status led 2 




unsigned int liczniksetspeed = 0;
unsigned int licznikcancel = 0;
byte SPsetspeed = 0;
byte LPsetspeed = 0;
byte SPcancel = 0;
byte LPcancel = 0;


float Kp; //Initial Proportional Gain
float Ki; //Initial Integral Gain
float Kd;  

float Kph = 1.27;
float Kih = 0.55;
float Kdh = 0.62;

float Kpl = 0.9;
float Kil = 0.4;
float Kdl = 0.30;

// dane do menu
byte licznikA;
byte licznikB;
byte licznikC;
byte licznikD;
unsigned long interval8= 200;
unsigned long prevtime8;
unsigned long interval9 = 250;
unsigned long prevtime9;

unsigned long prevtime10;
unsigned long interval10 = 1500;

byte spA;
byte lpA;
byte spB;
byte lpB;
byte menu;
byte submenu = 0;
byte submenu1 =0;
byte submenu2 = 0;
byte submenu3 = 0;
byte submenu4 = 0;  // shifttime submenu
byte submenu5 = 0;


byte submenu7 = 0;
byte submenu8 = 0;
byte submenu9 = 0;
byte sentStatus;
float epromfloat;
byte eprombyte;
double epromdouble;
unsigned long epromlong;
int epromint;
unsigned long currtime = millis();

/////////////////////variables for shiftlight////////////////////
byte shiftlightON = 1;
byte shiftled = 0;
byte prevshiftled = 0;
byte shiftlightBlink = 0;
byte shiftChange = 0;
unsigned long SerialInterval = 200;
unsigned long BlinkPrev = 0;
unsigned long shiftlightStart = 6800;
unsigned long shiftlightEnd = 8200;

byte red1 = 0;
byte green1 = 255;
byte blue1 = 0;


byte red2 = 0;
byte green2 = 255;
byte blue2 = 0;

byte red3 = 0;
byte green3 = 255;
byte blue3 = 0;

byte red4 = 0;
byte green4 = 255;
byte blue4 = 0;

byte red5 = 0;
byte green5 = 255;
byte blue5 = 0;



byte rend = 0;
byte gend = 255;
byte bend = 0;

byte rgbsetupON = 0;
byte led1setupON = 0;
byte led2setupON = 0;
byte led3setupON = 0;
byte led4setupON = 0;
byte led5setupON = 0;
byte ledendsetupON = 0;
byte saveRGB = 0;

byte ledDataSent = 1;

byte BTon = 0;

//////////////////////// shiftlight end //////////////////////
/////////////////////// aditional buttons ///////////////////
int CaseButton1;
int CaseButton2;
byte CaseButtonON = 1;

//////////////////////////////////////////////////////////////
//////////////////////curent sensor//////////////////////////
int curentdrow;
int curentTreshholdarray[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
int curentlimit;
byte krancowka = 0;
int Xinput;
int Xinput1;
int XI1;
int XI2; 
int Q1;
int Q2;
int servoangle;
int offset = 60;
// byte surentLimitSet = 0;
byte curentlicznik = 146;
byte curentsensor = 0;
///////////////////////end/////////////////////////////////////
float gearRatio = 0;
byte gearRatioSetup = 0;
byte gear = 0;
double ratio1;
double ratio2;
double ratio3;
double ratio4;
double ratio5;
double ratio6;
byte gearDisplay = 0;
float transRPM;
byte ledBlink = 0;
float averageRPMfloat; 

double Setpoint, Input, Output; //These are just variables for storingvalues
PID myPID(&Input, &Output, &Setpoint, Kp, Ki, Kd, DIRECT);


int sampleRate; // Variable that determines how fast our PID loop runs

unsigned long prevlicznik = 0;
unsigned long prevlicznik1 = 0;
    
 void setup()
{
Serial1.begin(9600);   // GET VALUES USING Serial1 MONITOR
Serial.begin(9600);  
Serial2.begin(9600);
  
 // Serial.print("Initializing SD card...");      //inicjalizacja karty do logowania

  // see if the card is present and can be initialized:
//  pinMode(10, OUTPUT);
//  digitalWrite(chipSelect, HIGH);
//SD.begin(chipSelect);
 // Serial.println("Card failed, or not present");
    // don't do anything more:
   // while (1);

//  Serial.println("card initialized.");
//    File dataFile = SD.open("datalog.txt", FILE_WRITE);
//         dataFile.println(" ");
//         
//        dataFile.println(" ");
//        dataFile.print("Rozpoczecie logowania ");
//        dataFile.println(" ");
//        dataFile.close();                  //koniec inicjalizacji i wstawienie informacji o rozpoczeciu logowania

   
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);

     pinMode(ledPin, OUTPUT);
     pinMode(ledpin2, OUTPUT);
     pinMode(relay, OUTPUT);  // QS
    digitalWrite(ledPin, LOW);
    digitalWrite(ledpin2, LOW);
    digitalWrite(relay, LOW);
  //I2Cdev::readTimeout = 100;  
  //display.display();
  //delay(1500); // Pause for 2 seconds


Wire.setClock(100000);
  
  display.clearDisplay();

 display.drawBitmap(31, 0,  Logo, 64, 61, 1);
  display.display();
  delay(2000);

 //display.clearDisplay();
 //display.drawBitmap(0, 0,  cruise, 128, 64, 1);
 //display.display();
 //delay(3000);


  
//pinMode(LED_BUILTIN, OUTPUT);
menu = 0;
submenu = 0;
submenu1 = 0;
shifting = 0;
shiftready = 1;

//EEPROM.put(24,0);
//EEPROM.put(25,0);
//EEPROM.put(26,0);
//EEPROM.put(27,0);
//EEPROM.put(28,0);
//EEPROM.put(29,0);
//EEPROM.put(34,0);





EEPROM.get(0, epromfloat);
if (epromfloat > 0){
  Kph = epromfloat;
}
EEPROM.get(4, epromfloat);
if (epromfloat > 0){
  Kih = epromfloat;                                                                                                                                                                                                                                                                                                                                                              
}
EEPROM.get(8, epromfloat);
if (epromfloat > 0){
  Kdh = epromfloat;                                                                                                                                                                                                                                                                                                                                                              
}
EEPROM.get(12, epromfloat);
if (epromfloat > 0){
  Kpl = epromfloat;                                                                                                                                                                                                                                                                                                                                                              
}
EEPROM.get(16, epromfloat);
if (epromfloat > 0){
  Kil = epromfloat;                                                                                                                                                                                                                                                                                                                                                              
}
EEPROM.get(20, epromfloat);
if (epromfloat > 0){
  Kdl = epromfloat;                                                                                                                                                                                                                                                                                                                                                              
}
EEPROM.get(30, eprombyte);
if (eprombyte > 0){
  PulsesPerRevolution = eprombyte;                                                                                                                                                                                                                                                                                                                                                              
}
EEPROM.get(24, QSon);
if (QSon > 0){
  display.clearDisplay();
  display.drawBitmap(0, 0, qson, 128 , 64, 1);
  display.display();
  delay(1500);
  QSon = 1;
}
else if (QSon == 0){
  display.clearDisplay();
  display.drawBitmap(0, 0, qsoff, 128 , 64, 1);
  display.display();
  delay(1500);
  
}




EEPROM.get(34, epromlong);
if (epromlong > 0){
  shifttime = epromlong;
}
EEPROM.get(38, ratio1);
EEPROM.get(42, ratio2);
EEPROM.get(47, ratio3);
EEPROM.get(51, ratio4);
EEPROM.get(55, ratio5);
EEPROM.get(59, ratio6);
EEPROM.get(63, gearDisplay);
EEPROM.get(64, gearRatioSet);

EEPROM.get(77, epromlong);
if (epromlong > 0){
  shiftlightStart = epromlong;
}
EEPROM.get(81, epromlong);
if (epromlong > 0){
  shiftlightEnd = epromlong;
}
EEPROM.get(73, shiftlightON);
if (shiftlightON > 1){
  EEPROM.put(73, 0);
}


for (int i = 0; i <= 2; i++){
    
  for(int a = 0; a <= 4; a++){
  EEPROM.get(licznikeeprom, epromlong);
  if ((epromlong > 0) && (epromlong < 300)){
  shifttimearray[i][a] = epromlong;
  }
  licznikeeprom = licznikeeprom + 4;
}
}
licznikeeprom = 85;

for (int c = 0; c <= 11; c++){
  EEPROM.get(curentlicznik, epromint);
  if ((epromint > 0) && (epromint < 1024)){
    curentTreshholdarray[c] = epromint;
  }
  curentlicznik = curentlicznik + 2;
}
curentlicznik = 146;

for (int c = 0; c <=4; c++){
  EEPROM.get(curentlicznik1, epromint);
  if((epromint > 0) && (epromint < 2000)){
    tpsanglearray[c] = epromint;
  }
  curentlicznik1 = curentlicznik1 +2;
}
curentlicznik1 = 172;

EEPROM.get(182, eprombyte);  
if (eprombyte == 1){
  tpsinput = 1; 
}
else{
  tpsinput = 0;
}
EEPROM.get(183, eprombyte);
if (eprombyte == 1){
  curentsensor = 1;   
}
else {
  curentsensor = 0;
}
EEPROM.get(211, eprombyte);
if ((curentsensor == 1) && (eprombyte == 1)){
  krancowka = 1;
} else {
  krancowka = 0;
}

EEPROM.get(184, eprombyte);
if (eprombyte == 1){
  tpsvsanglesetup = 1;
}
else {
  tpsvsanglesetup = 0;
}
EEPROM.get(185, eprombyte);
if (eprombyte == 1){
  speedvstpssetup = 1;
}
else{
  speedvstpssetup = 0;
}
EEPROM.get(191, epromint);
if (epromint < 1025){
  tpsmin = epromint;
}else{
  tpsmin = 0;
}
EEPROM.get(193, epromint);
if (epromint < 1025){
  tpsmax = epromint;
}else{
  tpsmax = 0;
}
EEPROM.get(195, epromdouble);
if ((epromdouble > 0) && (epromdouble < 1)){
  multilow = epromdouble;
}
EEPROM.get(199, epromdouble);
if ((epromdouble > 0) && (epromdouble < 1)){
  multimid = epromdouble;
}
//EEPROM.get(203, epromdouble);
//if ((epromdouble > 0) && (epromdouble < 1)){
//  multihigh = epromdouble;
//}

EEPROM.get(207, epromfloat);
if ((epromfloat > 0) && (epromfloat < 3)){
  wheeldiameter = epromfloat;
}




manualspeedup = 0;
manualspeeddown = 0;
     Setpoint = 0;
     Output = 900;
angle = 900;
   
   myServo.write(angle);    
     //pinMode(ledPin, OUTPUT);
     //pinMode(ledpin2, OUTPUT);
     pinMode(hamulec, INPUT);
     pinMode(12, INPUT);    // QS sensor
      pinMode(servorelay, OUTPUT);//        przekaznik zasilania serwa
     digitalWrite(32, LOW);
     
     
     //pinMode(relay, OUTPUT);  // QS
    //digitalWrite(ledPin, HIGH);
    //digitalWrite(ledpin2, LOW);
    //digitalWrite(relay, LOW);
     myServo.attach(9, 900, 1550); // attaches the servo on pin 9 to the servo object
     myServo.write(angle);  

servosweepup = 0;
servosweepdown = 0;
modyfikator = 0;     
     
          //   angle bedzie wysciem na serwo tempomatu
   
     
    
lowspeed = 1;
highspeed = 0;
zmiana = 0;
//standelta = 0;
//brake = 0;
     
     
     // do wprowadzenia z przycisku
      
    
     pinMode(setspeed, INPUT);    //przyciski do tempomatu
     pinMode(cancel, INPUT);

///////////////case buttons/////////////////////////
    pinMode(33, INPUT);
    pinMode(34, INPUT);
    




//////////////curent sensor//////////////////////////

    pinMode(A1, INPUT);

///////////////////////////////////////////////////
///////////tps//////////////////////////////////
pinMode(A3,INPUT);     

sampleRate = interval4;
  myPID.SetMode(MANUAL);  //Turn on the PID loop      uruchomienie pida
  myPID.SetSampleTime(sampleRate); //Sets the sample rate
  myPID.SetOutputLimits(900, 1550);
 stantemp = 0;


attachInterrupt(digitalPinToInterrupt(3), Pulse_Event, FALLING);
attachInterrupt(digitalPinToInterrupt(2), Pulse_EventRPM, FALLING );
Kp = Kpl;
Ki = Kil;
Kd = Kdl;
digitalWrite(servorelay, HIGH);
    digitalWrite(ledPin, HIGH);
     
  myPID.SetTunings(Kp, Ki, Kd);
// pixels.begin();
   
 }
 
 void loop()
 {
//if((licznik > prevlicznik) || (licznik1 > prevlicznik1)){
//  Serial.println(licznik);
//  Serial.println(licznik1);
//  Serial.println("");
//  prevlicznik = licznik;
//  prevlicznik1 = licznik1;
//}
  
 
//currtime = millis();                 // GET CURRENT TIME
//unsigned long currentMillis = millis();  
    
  myServo.write(angle);  
/////////////////////////////////RPM//////////////////////////////////////
LastTimeCycleMeasureRPM = LastTimeWeMeasuredRPM;  // Store the LastTimeWeMeasured in a variable.
  CurrentMicrosRPM = micros();  // Store the micros() in a variable.
 if(CurrentMicrosRPM < LastTimeCycleMeasureRPM)
  {
    LastTimeCycleMeasureRPM = CurrentMicrosRPM;
  }
 FrequencyRawRPM = 10000000000 / PeriodAverageRPM;
 if(PeriodBetweenPulsesRPM > ZeroTimeoutRPM - ZeroDebouncingExtraRPM || CurrentMicrosRPM - LastTimeCycleMeasureRPM > ZeroTimeoutRPM - ZeroDebouncingExtraRPM)
  {  // If the pulses are too far apart that we reached the timeout for zero:
    FrequencyRawRPM = 0;  // Set frequency as 0.
    ZeroDebouncingExtraRPM = 2000;  // Change the threshold a little so it doesn't bounce.
  }
  else
  {
    ZeroDebouncingExtraRPM = 0;  // Reset the threshold to the normal value so it doesn't bounce.
  }
FrequencyRealRPM = FrequencyRawRPM / 10000;
  RPMRPM = FrequencyRawRPM / PulsesPerRevolutionRPM * 60;  // Frequency divided by amount of pulses per revolution multiply by
                                                  // 60 seconds to get minutes.
  RPMRPM = RPMRPM / 10000;
  totalRPM = totalRPM - readingsRPM[readIndexRPM];  // Advance to the next position in the array.
  readingsRPM[readIndexRPM] = RPMRPM;  // Takes the value that we are going to smooth.
  totalRPM = totalRPM + readingsRPM[readIndexRPM];  // Add the reading to the total.
  readIndexRPM = readIndexRPM + 1;  // Advance to the next position in the array.

  if (readIndexRPM >= numReadingsRPM)  // If we're at the end of the array:
  {
    readIndexRPM = 0;  // Reset array index.
  }
  
  // Calculate the average:
  averageRPM = totalRPM / numReadingsRPM;





///////////////////////////////END RPM///////////////////////////////////
  
/////////////////////////////////SPEED/////////////////////////////////////  
  // The following is going to store the two values that might change in the middle of the cycle.
  // We are going to do math and functions with those values and they can create glitches if they change in the
  // middle of the cycle.
  LastTimeCycleMeasure = LastTimeWeMeasured;  // Store the LastTimeWeMeasured in a variable.
  CurrentMicros = micros();  // Store the micros() in a variable.





  // CurrentMicros should always be higher than LastTimeWeMeasured, but in rare occasions that's not true.
  // I'm not sure why this happens, but my solution is to compare both and if CurrentMicros is lower than
  // LastTimeCycleMeasure I set it as the CurrentMicros.
  // The need of fixing this is that we later use this information to see if pulses stopped.
  if(CurrentMicros < LastTimeCycleMeasure)
  {
    LastTimeCycleMeasure = CurrentMicros;
  }
  // Calculate the frequency:
  FrequencyRaw = 10000000000 / PeriodAverage;  // Calculate the frequency using the period between pulses.
  // Detect if pulses stopped or frequency is too low, so we can show 0 Frequency:
  if(PeriodBetweenPulses > ZeroTimeout - ZeroDebouncingExtra || CurrentMicros - LastTimeCycleMeasure > ZeroTimeout - ZeroDebouncingExtra)
  {  // If the pulses are too far apart that we reached the timeout for zero:
    FrequencyRaw = 0;  // Set frequency as 0.
    ZeroDebouncingExtra = 2000;  // Change the threshold a little so it doesn't bounce.
  }
  else
  {
    ZeroDebouncingExtra = 0;  // Reset the threshold to the normal value so it doesn't bounce.
  }





  FrequencyReal = FrequencyRaw / 10000;  // Get frequency without decimals.
                                          // This is not used to calculate RPM but we remove the decimals just in case
                                          // you want to print it.




  // Calculate the RPM:
  RPM = FrequencyRaw / PulsesPerRevolution * 3600;  // Frequency divided by amount of pulses per revolution multiply by
                                                  // 60 seconds to get minutes.
  RPM = RPM / 10000;  // Remove the decimals.





  // Smoothing RPM:
  total = total - readings[readIndex];  // Advance to the next position in the array.
  readings[readIndex] = RPM;  // Takes the value that we are going to smooth.
  total = total + readings[readIndex];  // Add the reading to the total.
  readIndex = readIndex + 1;  // Advance to the next position in the array.

  if (readIndex >= numReadings)  // If we're at the end of the array:
  {
    readIndex = 0;  // Reset array index.
  }
  
  // Calculate the average:
  average = total / numReadings;  // The average value it's the smoothed result.
 
////////////////////////////////////END SPEED///////////////////////////////////////////
////////////////////////////////////GEAR RATIO//////////////////////////////////////
transRPM = average / 60; 
averageRPMfloat = averageRPM;    
gearRatio = averageRPMfloat / transRPM;

//total2 = total2 - readings2[readIndex2];
//readings2[readIndex2] = gearRatio;
//total2 = total2 + readings2[readIndex2]; 
//readIndex2 = readIndex2 + 1;
//if (readIndex2 >= numReadings2) {
//readIndex2 = 0;
//}
//average2 = total2 / numReadings2;
//gearRatioAverage = average2;

///////////////////////////////GEAR RATIO END /////////////////////////////////////////




currtime = millis();
if (currtime - previousMillis5 >= interval5) {
    // save the last time you blinked the LED
    previousMillis5 = currtime;
//Serial.print("FreequencyReal: ");
//Serial.println(FrequencyReal);
//Serial.print("FreequencyRaw: ");
//Serial.println(FrequencyRaw);
//Serial.print("PPR: ");
//Serial.print(PulsesPerRevolution);

//Serial.print("RPM: ");
//Serial.println(RPM);
//Serial.print("Predkosc: ");
//Serial.println(predkosc);
//Serial.print("Shif testD: ");
//Serial.println(shifttest);
//Serial.print("Shif testL: ");
//Serial.println((unsigned long)shifttest);

//Serial.print("Multlow: ");
////Serial.println(multilow);
//Serial.print("multimid: ");
//Serial.println(multimid);
//Serial.print("multihigh: ");
//Serial.println(multihigh);
//Serial.print("multi: ");
//Serial.println(multi);
//Serial.print("ham: ");
//if (stanham == HIGH){
//Serial.print("ON");
//}
//else if (stanham == LOW){
//  Serial.print("OFF");
//}



tpsraw = analogRead(A3);
curentdrow = analogRead(A1);
//Kp = analogRead(pot4) * 0.005;
//Ki = analogRead(pot2) * 0.005; 
//Kd = analogRead(pot3) * 0.003;
//interval4 = analogRead(pot5);
//Input = analogRead(napiecie);         
//predkosc = licznik*1.44;
//predkosc = (average * wheeldiameter)/1000;
predkosc = average * 0.002068;
Input = predkosc * 3.5;
//transRPM = average / 60;
averageRPM1 = averageRPM;
tps = map(tpsraw, tpsmin, tpsmax, 0, 100);

if (gearRatioSet == 1){
  

if ((gearRatio >= (ratio1 * 0.8)) && (gearRatio <= (ratio1 * 1.2))){
  gear = 1;
}
else if ((gearRatio >= (ratio2 * 0.85)) && (gearRatio <= (ratio2 * 1.15))){
  gear = 2;
}
else if ((gearRatio >= (ratio3 * 0.9)) && (gearRatio <= (ratio3 * 1.1))){
  gear = 3;
}
else if ((gearRatio >= (ratio4 * 0.93)) && (gearRatio <= (ratio4 * 1.07))){
  gear = 4;
}
else if ((gearRatio >= (ratio5 * 0.95)) && (gearRatio <= (ratio5 * 1.05))){
  gear = 5;
}
else if ((gearRatio >= (ratio6 * 0.95)) && (gearRatio <= (ratio6 * 1.05))){
  gear = 6;
}
else{
  gear = 0;    
}
}
///////////////////////////////////////tps
/*
if (tpsinput == 1){

if (desiredtps < 25){
  xtps1 = 0;
  xt1 = 0;
}
else if ((desiredtps >= 25) && (desiredtps <50)){
  xtps1 = 1;
  xt1 = 25;
}
else if ((desiredtps >= 50) && (desiredtps <75)){
  xtps1 = 2;
  xt1 = 50;
}
else if (desiredtps >= 75){
  xtps1 = 3;
  xt1 = 75;
}
xtps2 = xtps1 +1;
xt2 = xt1 +25;

T1 = tpsanglearray[xtps1];
T2 = tpsanglearray[xtps2];

double desiredangle1 = ((((double)xt2 - (double)desiredtps)/((double)xt2 - (double)xt1)) * (double)T1) + ((((double)desiredtps - (double)xt1)/((double)xt2 - (double)xt1)) * (double)T2);
desiredangle = (int)desiredangle1;


if (predkosc < speed1){
  xpredkosc1 = 0;
  xp1 = 0;
  xp2 = speed1;
  
}
else if ((predkosc >= speed1) && ( predkosc < speed2)){
  xpredkosc1 = 1;
  xp1 = speed1;
  xp2 = speed2; 
}
else if ((predkosc >= speed2) && ( predkosc < speed3)){
  xpredkosc1 = 2;
  xp1 = speed2;
  xp2 = speed3; 
}
else if (predkosc > speed3){
  xpredkosc1 = 3;
  xp1 = speed3;
  xp2 = speed4; 
}

xpredkosc2 = xpredkosc1 + 1;
P1 = tpsspeedarray[xpredkosc1];
P2 = tpsspeedarray[xpredkosc2];
double desiredtps1 = ((((double)xp2 - (double)predkosc)/((double)xp2 - (double)xp1)) * (double)P1) + ((((double)predkosc - (double)xp1)/((double)xp2 - (double)xp1)) * (double)P2);
desiredtps = desiredtps1;

if ((speedvstpssetup == 1) && (tpsvsanglesetup == 1) && (tpsinput == 1)){
  tpssetupcomplited = 1;
}
}
*/
////////////////////////////////tps end///////////////////////////
} 

//gearRatio = averageRPM / transRPM;

//total2 = total2 - readings2[readIndex2];
//readings2[readIndex2] = gearRatio;
//total2 = total2 + readings2[readIndex2]; 
//readIndex2 = readIndex2 + 1;
//if (readIndex2 >= numReadings2) {
//readIndex2 = 0;
//}
//average2 = total2 / numReadings2;
//gearRatioAverage = average2;





//}
//smothing speed input
//total1 = total1 - readings1[readIndex1];
//readings1[readIndex1] = predkosc1;
//total1 = total1 + readings1[readIndex1]; 
//readIndex1 = readIndex1 + 1;
//if (readIndex1 >= numReadings1) {
//readIndex1 = 0;
//}
//average1 = total1 / numReadings1;
//predkosc2=average1;








currtime = millis();
if (currtime - previousMillis1 >= interval) {
    // save the last time you blinked the LED
    previousMillis1 = currtime;

actualspeed = predkosc;
delta = actualspeed - prevspeed;
prevspeed = actualspeed;

if ((delta < 1) && (manualspeedup == 1 )){
modyfikator = modyfikator + 5;
}
else if ((delta > 2) && (manualspeedup == 1)){
  modyfikator = modyfikator - 5;
}

if (delta < -30){
   myPID.SetMode(MANUAL);
  manualspeedup = 0;
  manualspeeddown = 0;
  digitalWrite (ledpin2, LOW);
  Output = 900;
  stantemp = 0;
  angle = 900;
//  standelta = 1;
}

if ((manualspeeddown == 1) && (delta < -2)){
  modyfikator = modyfikator + 5;
}
else if ((manualspeeddown == 1) && (delta > -1)){
  modyfikator = modyfikator - 5;
}






if (predkosc < 60){
  multi = multilow;
}
else if ((predkosc >=60) && (predkosc < 105)) {
  multi = multimid;
}
else if (predkosc >= 105){
  multi = multihigh;
}
/*
if (averageRPM1 <3000){
  shifttime = 120;
}
else if ((averageRPM1 >=3000) && (averageRPM1 <=5000)){
  shifttime = 110;
}
else if ((averageRPM1 >5000) && (averageRPM1 <= 7000)){
  shifttime = 100;
}
else if (averageRPM1 > 7000){
  shifttime = 90;
}
*/
//////////////////////// QS Part1 //////////////////////////


/*
if (averageRPM1 <= 3000){
  Xrpm = 0;
  xr1 = 0;
}
else if ((averageRPM1 > 3000) && (averageRPM1 <= 6000)){
  Xrpm = 1;
  xr1 = 3000;
}
else if ((averageRPM1 > 6000) && (averageRPM1 <= 9000)){
  Xrpm = 2;
  xr1 = 6000;
}
else if (averageRPM1 > 9000){
  Xrpm = 3;
  xr1 = 9000;
}
Xrpm1 = Xrpm +1;
xr2 = xr1 + 3000;
*/



if ((gearRatioSet == 1) && (gear == 1)){
  QSgear = 1;
}
else if ((gearRatioSet == 1) && (gear > 1)){
  QSgear = 2;
}
else if (gearRatioSet == 0){
  QSgear = 0;
}


if (averageRPM1 <3000){
  shifttime = shifttimearray[QSgear][0];
}
else if ((averageRPM1 >=3000) && (averageRPM1 < 6000)){
  shifttime = shifttimearray[QSgear][1];
}
else if ((averageRPM1 >=6000) && (averageRPM1 < 9000)){
  shifttime = shifttimearray[QSgear][2];
}
else if ((averageRPM1 >=9000) && (averageRPM1 < 12000)){
  shifttime = shifttimearray[QSgear][3];
}
else if (averageRPM1 >12000){
  shifttime = shifttimearray[QSgear][4];
}





//S1 = shifttimearray[QSgear][Xrpm];
//S2 = shifttimearray[QSgear][Xrpm1];

//shifttest = ((((double)xr2 - (double)averageRPM1)/((double)xr2 - (double)xr1)) * (double)S1) + ((((double)averageRPM1 - (double)xr1)/((double)xr2 - (double)xr1)) * (double)S2);
//shifttime = (unsigned long)shifttest;




///////////////////////////QS part 1 end//////////////////////////////

if ((predkosc < 60) && (highspeed == 1)){
  lowspeed = 1;
  highspeed = 0;
  zmiana = 1;
}
else if ((predkosc > 65) && (lowspeed == 1)) {
  lowspeed = 0;
  highspeed = 1;
  zmiana = 1;
}


if ((lowspeed == 1) && (zmiana == 1)){
Kp = Kpl;
Ki = Kil;
Kd = Kdl;
myPID.SetTunings(Kp, Ki, Kd); 
zmiana = 0;
}
 else if ((highspeed == 1) && (zmiana ==1)){
Kp = Kph;
Ki = Kih;
Kd = Kdh;
myPID.SetTunings(Kp, Ki, Kd);   
zmiana = 0;
}
}

/////////////////////////new buttons for cc/////////////
currtime = millis();

if ((currtime - prevprzyciski >= intervalprzyciski) && (stansetspeed == LOW) && (Input > 100)){
  liczniksetspeed++;
  prevprzyciski = currtime;
}
if ((currtime - prevprzyciski >= intervalprzyciski) && (stancancel == LOW) && (Input > 100)){
  licznikcancel++;
  prevprzyciski = currtime;
}



if ((stansetspeed == HIGH) && (liczniksetspeed > 0) && (liczniksetspeed <= 8)){
  SPsetspeed = 1;
  liczniksetspeed = 0;
}
else if ((stansetspeed == LOW) && (liczniksetspeed > 8)){
  LPsetspeed = 1;
}
else if ((stansetspeed == HIGH) && (liczniksetspeed > 8)){
  LPsetspeed = 0;
  liczniksetspeed = 0;
  PrevLPsetspeed = 1;
}




if ((stancancel == HIGH) && (licznikcancel > 0) && (licznikcancel <= 8)){
  SPcancel = 1;
  licznikcancel = 0;
}
else if ((stancancel == LOW) && (licznikcancel > 8)){
  LPcancel = 1;
}
else if ((stancancel == HIGH) && (licznikcancel > 8)){
  LPcancel = 0;
  licznikcancel = 0;
  PrevLPcancel = 1;
}
if ((Input < 100) && ((SPcancel == 1) || (SPsetspeed == 1) || (LPcancel == 1) || (LPsetspeed == 1))){
  SPcancel = 0;
  SPsetspeed = 0;
  LPcancel = 0;
  LPsetspeed = 0;
  PrevLPcancel = 0;
  PrevLPsetspeed = 0;
  licznikcancel = 0;
  liczniksetspeed = 0;
}




////////////////////////////////end new cc buttons part 1




/////////////////////////////Gear Ratio Setup rutine////////////////////////////
if (gearRatioSetup == 1){
//if (ledsoff == 0){
//digitalWrite(ledPin, LOW);
//digitalWrite(ledpin2, LOW);
//ledsoff = 1;
//}






ledBlink = 1;
if ((currtime - previousMillis2 >= interval2) && (stansetspeed == LOW)){     
     previousMillis2 = currtime;
if (gear1setup == 0){
  ratio1 = gearRatio;     
  gear1setup = 1;
}
else if ((gear1setup == 1) && (gear2setup == 0)){
  ratio2 = gearRatio;
  gear2setup = 1;
}
else if ((gear1setup == 1) && (gear2setup == 1) && (gear3setup == 0)){
  ratio3 = gearRatio;
  gear3setup = 1;
}
else if ((gear1setup == 1) && (gear2setup == 1) && (gear3setup == 1) && (gear4setup == 0)){
  ratio4 = gearRatio;
  gear4setup = 1;
}
else if ((gear1setup == 1) && (gear2setup == 1) && (gear3setup == 1) && (gear4setup == 1) && (gear5setup == 0)){
  ratio5 = gearRatio;
  gear5setup = 1;
}
else if ((gear1setup == 1) && (gear2setup == 1) && (gear3setup == 1) && (gear4setup == 1) && (gear5setup == 1) && (gear6setup == 0)){
  ratio6 = gearRatio;
  gearRatioSetup = 0;
  gearRatioSet = 1;
//  digitalWrite(ledPin, HIGH);
  digitalWrite(ledpin2, LOW);
  EEPROM.put(38, ratio1);
  EEPROM.put(42, ratio2);
  EEPROM.put(47, ratio3);
  EEPROM.put(51, ratio4);
  EEPROM.put(55, ratio5);
  EEPROM.put(59, ratio6);
  EEPROM.put(64, gearRatioSet);
ledBlink = 0;
gear1setup = 0;
gear2setup = 0;
gear3setup = 0;
gear4setup = 0;
gear5setup = 0;
gear6setup = 0;
}


     
}


  
}


//////////////////////////////////speed to tps rutine//////////////////

if((speedvstpssetupON == 1) && (tpsinput == 1) && (tpsvsanglesetup == 1)){
ledBlink = 1;
if ((currtime - previousMillis2 >= interval2) && (stansetspeed == LOW)){     
     previousMillis2 = currtime;   
      
    if (speed1set == 0){
      speed1 = predkosc;
      tpsspeedarray[1] = tps;      
      speed1set =1;      
    }
    else if ((speed1set == 1) && (speed2set == 0)){
      speed2 = predkosc;
      tpsspeedarray[2] = tps;
      speed2set = 1;
    }
    else if ((speed1set == 1) && (speed2set == 1) &&(speed3set == 0)){
      speed3 = predkosc;
      tpsspeedarray[3] = tps;
      speed3set = 1;
    }
    else if ((speed1set == 1) && (speed2set == 1) && (speed3set == 1) && (speed4set == 0)){
      speed4 = predkosc;
      tpsspeedarray[4] = tps;
      speedvstpssetupON = 0;
      speed1set = 0;
      speed2set = 0;
      speed3set = 0;
      for (int t = 0; t <= 4; t++){
        EEPROM.put(tpslicznik, tpsspeedarray[t]);
        tpslicznik = tpslicznik +2;
          
      }
      ledBlink = 0;
      tpslicznik = 186;
        digitalWrite(ledpin2, LOW);
        speedvstpssetup = 1;
        EEPROM.put(185, 1);
                            
    }

   

}    
}
////////////////////////////////speed to tps rutineend////////////////////////////


     stansetspeed = digitalRead(setspeed);           // ustawienie prędkości i próba uruchomienia  zabaczymy jak dalej
     stancancel = digitalRead(cancel);
    stanham = digitalRead(hamulec);
    QSsensor = digitalRead(12);


/////////////////casebuttons/////////////////

CaseButton1 = digitalRead(33);
CaseButton2 = digitalRead(34);




/////////////////casebuttons end/////////////


  
     
     
 
   // sampleRate = interval4; 
   // myPID.SetTunings(Kp, Ki, Kd);
   // myPID.SetSampleTime(sampleRate);
     





     myPID.Compute();  //Run the PID loop
   
currtime = millis();
//if ((stantemp == 0) && (servosweepup == 0) && (servosweepdown == 0) && (angle >= 900) && (angle <= 910) && (relayON == 1)){
//relayON = 0;
//previousMillis11 = millis();

//}
//if ((relayON == 0) && (currtime - previousMillis11 >= interval11)){
//  digitalWrite(servorelay, LOW);
//}
//if (((stantemp == 1) || ( servosweepup == 1) || (servosweepdown == 1)) && (angle >=900) && (angle <=910)){
//
//}

     
   //     zmiana tej funkcji     angle = Output;    
currtime = millis();
servoangle = angle - 900;
  if ((Output > angle) && (currtime - previousMillis3 >= interval3)) {
    angle = angle + 1;
    previousMillis3 = currtime;
  }

  if ((Output < angle) && (currtime - previousMillis3 >= interval3))  {
    angle = angle - 1;
    previousMillis3 = currtime;
  }

//////////////////////////////////////CC buttons  part 2 



     if ((LPsetspeed == 1) && (Input > 100) && (stantemp == 0)){
      SPsetspeed = 1;
     }
     if ((LPcancel == 1) && (Input > 100) && (stantemp == 0) && (Setpoint > 100)){
      SPcancel = 1;
     }
     if ((SPcancel == 1) && ((Input < 100) || ((Input > 100) && (Setpoint <= 100)))  && (stantemp == 0)){
      SPcancel = 0;
     }
     if ((SPsetspeed == 1) && (Input < 100) && (stantemp == 0)){
      SPcancel = 0;
     }     
     
     if ((SPsetspeed == 1) && (stantemp == 0) && (Input > 100) && (gearRatioSetup == 0) && (speedvstpssetupON == 0)) {
     Setpoint = Input;
     SPsetspeed = 0;
     if (tpssetupcomplited == 1){
      Output = desiredangle;
     }else {
     Output = 900 + (Input*multi);  //trzeba ustawic jak to przeliczyc
     }     
     myPID.SetMode(AUTOMATIC);
     digitalWrite (ledpin2, HIGH) ;
     stantemp = 1;
     //previousMillis2 = currtime;

     } 


     if ((SPsetspeed == 1) && (stantemp == 1) && (gearRatioSetup == 0) && (speedvstpssetupON == 0)) {
      Setpoint = Setpoint - 4;
      //previousMillis2 = currtime;
      SPsetspeed = 0;
     }
     
     
     if ((SPcancel == 1) && (stantemp == 1) && (gearRatioSetup == 0) && (speedvstpssetupON == 0)){
      Setpoint = Setpoint + 4;
      //previousMillis2 = currtime;
      SPcancel = 0;
   }

    if ((SPcancel == 1) && (stantemp == 0) && (Input > 100) && (Setpoint > 100) && (gearRatioSetup == 0) && (speedvstpssetupON == 0)){
      if (tpssetupcomplited == 1){
       Output = desiredangle; 
      }else{
      Output = 900 + (Input*multi);
      }
      myPID.SetMode(AUTOMATIC);
      digitalWrite (ledpin2, HIGH);
      stantemp = 1;
      //previousMillis2 = currtime;
      SPcancel = 0;

    }

if ((stantemp == 1) &&(manualspeedup == 0) && (manualspeeddown == 0) && (((Setpoint - Input) > 30) || (LPcancel == 1))){
  myPID.SetMode(MANUAL);
  manualspeedup = 1;
if (tpssetupcomplited == 1){
  Output = desiredangle + 170 + modyfikator;
      }else{
  Output = 900 + (Input*0.55) + 170 + modyfikator;
      }
} 
if ((stantemp == 1) && (manualspeedup == 0) && (manualspeeddown == 0) && (((Input - Setpoint) > 30) || (LPsetspeed == 1))){
  myPID.SetMode(MANUAL);
  manualspeeddown = 1;
  if (tpssetupcomplited == 1){
  Output = desiredangle - 70 + modyfikator;
  }else{
  Output = 900 + (Input*0.55) - 70 + modyfikator;

      }
} 
if ((stantemp == 1) && (manualspeedup == 1) && ((((Setpoint - Input) <= 17) && (LPcancel == 0) && (PrevLPcancel == 0)) || ((LPcancel == 0) && (PrevLPcancel == 1)))){
  manualspeedup = 0;
  if(PrevLPcancel == 1){
    PrevLPcancel = 0;
    Setpoint = Input;
  }
      if (tpssetupcomplited == 1){
       Output = desiredangle; 
      }else{
      Output = 900 + (Input*multi);
      }
  myPID.SetMode(AUTOMATIC);
  modyfikator = 0;
} 
if ((stantemp == 1) && (manualspeeddown == 1) && ((((Input - Setpoint) <= 17) && (LPsetspeed == 0) && (PrevLPsetspeed == 0)) || ((LPsetspeed == 0) && (PrevLPsetspeed == 1)))){
  manualspeeddown = 0;
  if (PrevLPsetspeed == 1){
    PrevLPsetspeed = 0;
    Setpoint = Input;
  }
      if (tpssetupcomplited == 1){
       Output = desiredangle; 
      }else{
      Output = 900 + (Input*multi);
      }
  myPID.SetMode(AUTOMATIC);
  modyfikator = 0;
}

if (manualspeedup == 1){
if (tpssetupcomplited == 1){
  Output = desiredangle + 170 + modyfikator;
      }else{
  Output = 900 + (Input*0.55) + 170 + modyfikator;
      }
}
if (manualspeeddown == 1){
  if (tpssetupcomplited == 1){
  Output = desiredangle - 70 + modyfikator;
  }else{
  Output = 900 + (Input*0.55) - 70 + modyfikator;
      }
}


if (((Input < 100 || Input >560) && (stantemp == 1)) || ((curentdrow >= curentlimit + offset) && (krancowka == 1) && (stantemp == 1) && (curentsensor == 1))){
  myPID.SetMode(MANUAL);
  manualspeedup = 0;
  manualspeeddown = 0;
  digitalWrite (ledpin2, LOW);
  Output = 900;
  stantemp = 0;
  angle = 900;

  SPcancel = 0;
  SPsetspeed = 0;
  LPcancel = 0;
  LPsetspeed = 0;
  PrevLPcancel = 0;
  PrevLPsetspeed = 0;
  licznikcancel = 0;
  liczniksetspeed = 0;
  
  
}
if (stanham == LOW){
  myPID.SetMode(MANUAL);
  manualspeedup = 0;
  manualspeeddown = 0;
  digitalWrite (ledpin2, LOW);
  Output = 900;
  stantemp = 0;
  angle = 900;

  SPcancel = 0;
  SPsetspeed = 0;
  LPcancel = 0;
  LPsetspeed = 0;
  PrevLPcancel = 0;
  PrevLPsetspeed = 0;
  licznikcancel = 0;
  liczniksetspeed = 0;
  
}




////////////////////////////////////////end CC buttons

////////////////////////////curentlimiting////////////////////////
///*
if (curentsensor == 1){

if (servoangle <= 60){
  Xinput = 0;
  XI1 = 0;
 
}
else if ((servoangle > 60) && (servoangle <= 120)){
  Xinput = 1;
  XI1 = 60;
 
}
else if ((servoangle > 120) && (servoangle <= 180)){
  Xinput = 2;
  XI1 = 120;

}
else if ((servoangle > 180) && (servoangle <= 240)){
  Xinput = 3;
  XI1 = 180;

}
else if ((servoangle > 240) && (servoangle <= 300)){
  Xinput = 4;
  XI1 = 240;

}
else if ((servoangle > 300) && (servoangle <= 360)){
  Xinput = 5;
  XI1 = 300;

}
else if ((servoangle > 360) && (servoangle <= 420)){
  Xinput = 6;
  XI1 = 360;

}
else if ((servoangle > 420) && (servoangle <= 480)){
  Xinput = 7;
  XI1 = 420;
 ;
}
else if ((Input > 480) && (Input <= 540)){
  Xinput = 8;
  XI1 = 480;
 
}
else if ((servoangle > 540) && (servoangle <= 600)){
  Xinput = 9;
  XI1 = 540;
  }
  else if (servoangle > 600){
    Xinput = 10;
    XI1 = 600;
  }
Xinput1 = Xinput + 1;
XI2 = XI1 + 60;
Q1 = curentTreshholdarray[Xinput];
Q2 = curentTreshholdarray[Xinput1];

curentlimit = (((((XI2*100) - (servoangle*100))/(XI2 - XI1)) * Q1)/100) + (((((servoangle*100) - (XI1*100))/(XI2 - XI1)) * Q2)/100);
}
//*/
//////////////////////////////////////////////////////////////////////////////////////////////////////

if (Setpoint > 560) {
  Setpoint = 560;
}


     if (angle < 900) {          // trzeba poprzeliczac z mikrosecund
      angle = 900;
     }
    if (angle > 1550){
      angle = 1550;
    }
//    if (Output < 900) {
//      Output = 900;
//    }
    
//    if (Output > 120){
//      Output = 120;
//    }



//katserva = (angle-1000)/5.5;

//if (currentMillis - previousMillis6 >= interval6) {
    // save the last time you blinked the LED
  //  previousMillis6 = currentMillis;
//actualspeed = Input;
//delta = actualspeed - prevspeed;
//prevspeed = actualspeed;




//}

if (ledBlink == 1){

if (currtime - previousMillis >= interval) {
//    // save the last time you blinked the LED
    previousMillis = currtime;
 if (blinkon == 0){
  digitalWrite(ledpin2, HIGH);
  blinkon = 1;
 }
else if (blinkon == 1){
  digitalWrite(ledpin2, LOW);
blinkon = 0;
}


 
//
//
//  File dataFile = SD.open("datalog.txt", FILE_WRITE);
// 
//  
  // if the file is available, write to it:
//  if (dataFile) {
//    //dataFile.println("");
//    dataFile.print("Input: ");
//    dataFile.print(Input);
//    dataFile.print(" Setpoint:  ");
//    dataFile.print(Setpoint);
//    dataFile.print(" Output:  ");
//    dataFile.print(Output);
//    dataFile.print("  manup: ");
//    dataFile.print(manualspeedup);
//    dataFile.print("  mandown: ");
//    dataFile.print(manualspeeddown);
//    dataFile.print("  Stan tempomatu: ");
//    dataFile.print(stantemp);
//    dataFile.print("   Angle: ");
//    dataFile.print(angle);
//    dataFile.print("  P: ");
//    dataFile.print(Kp);
//    dataFile.print("  I: ");
//    dataFile.print(Ki);
//    dataFile.print("  D: ");
//    dataFile.print(Kd);
//    dataFile.print("  PID: ");
//    //dataFile.print(interval4);
//    dataFile.print("  delta: ");
//    dataFile.print(delta);
//    dataFile.print("   Predkosc: ");
//    dataFile.println(predkosc);
//    dataFile.print(" ");
//    dataFile.print(predkosc1);
//    dataFile.print(" ");
//    dataFile.print(predkosc2);
//    dataFile.print(" ");
//    dataFile.print(predkosc3);
//    dataFile.print("   ilosc impulsow: ");
//    dataFile.print(AmountOfReadings);
//    dataFile.print("   licznik: ");
//    dataFile.println(licznik);
//    dataFile.close();    
//  }
//if (standelta == 1 || brake == 1){
//File dataFile = SD.open("datalog.txt", FILE_WRITE);
//if (dataFile) {
//if (standelta == 1){
//  dataFile.println("DELTA");
//  standelta = 0;
//}
//if (brake == 1){
//  dataFile.println("BRAKE");
//  brake = 0;
//}
// dataFile.close();
  
//}
//}
}
}

// program menu

if((predkosc > 0) && (stantemp == 0)){
  licznikA = 0;
  licznikB = 0;
  spA = 0;
  spB = 0;
  lpA = 0;
  lpB = 0;
  menu = 0;
  
}
if ((predkosc > 0) && (stantemp == 1)){
    licznikA = 0;
  licznikB = 0;
  spA = 0;
  spB = 0;
  lpA = 0;
  lpB = 0;
  menu = 40;
}




if (currtime - prevtime8 >= interval8){                   // przyciski do menu

if ((stansetspeed == LOW) && (predkosc == 0)){
licznikA++;
}
if ((CaseButton1 == LOW) && (CaseButtonON == 1) && (predkosc == 0)){
licznikC++;  
}


if ((stancancel == LOW) && (predkosc == 0)){
  licznikB++;
}
if ((CaseButton2 == LOW) && (CaseButtonON == 1) && (predkosc == 0)){
  licznikD++;
}


if ((stansetspeed == HIGH) && (licznikA > 0) && (licznikA <6)){
  spA = 1;
  licznikA = 0;
}
if ((CaseButton1 == HIGH) && (licznikC > 0) && (licznikC <6)&& (CaseButtonON == 1)){
  spA = 1;
  licznikC = 0;
}



if ((stansetspeed == HIGH) && (licznikA >= 6)){
  lpA = 1;
  licznikA = 0;
}

if ((CaseButton1 == HIGH) && (licznikC >= 6) && (CaseButtonON == 1)){
  lpA = 1;
  licznikC = 0;
}




if ((stancancel == HIGH) && (licznikB > 0) && (licznikB <6)){
  spB = 1;
  licznikB = 0;
}
if ((CaseButton2 == HIGH) && (licznikD > 0) && (licznikD <6) && (CaseButtonON == 1)){
  spB = 1;
  licznikD = 0;
}





if ((stancancel == HIGH) && (licznikB >= 6)){
  lpB = 1;
  licznikB = 0;
  
}
if ((CaseButton2 == HIGH) && (licznikD >= 6) && (CaseButtonON == 1)){
  lpB = 1;
  licznikD = 0;
  
}

              
prevtime8 = currtime;                                  
 }// koniec przyciskow do menu

//  poruszanie po menu
if ((menu == 0) && (spA == 1 || spB == 1)){
  spA = 0;
  spB = 0;
}
if ((menu == 0) && (lpA == 1) && ( lpB == 1)){
  menu = 10;
  lpA = 0;
  lpB = 0;
}
if ((menu == 0) && (lpA == 0) && (lpB == 1)){
  lpA = 0;
  lpB = 0;
  if (QSon == 0){
    QSon = 1;
    EEPROM.put (24, 1);
    menu = 70;
    QSchange = 1;
  }
 else if (QSon > 0){
    QSon = 0;
    EEPROM.put (24, 0);
    menu = 70;
    QSchange = 1;
  }
}

if (menu == 10){
if (spB == 1){
  submenu ++;
  spA = 0;
  spB = 0;
}
if (spA == 1){
  submenu --;
  spA = 0;
  spB = 0;
}
submenu = constrain(submenu, 0, 10);


if ((submenu == 0) && (lpA == 1 || lpB == 1)){      // przejscie na low PID
  menu = 20;
  submenu1 = 0;
  lpA = 0;
  lpB = 0;
  submenu = 0;
} 
if ((submenu == 1) && (lpA == 1 || lpB == 1)) {       // przejscie na high PID
menu = 20;
submenu1 = 1;
  lpA = 0;
  lpB = 0;
  submenu = 0;
}
if ((submenu == 2) && (lpA == 1 || lpB == 1)){
  menu = 50;
  lpA = 0;
  lpB = 0;
}
if ((submenu == 3) && (lpA == 1 || lpB == 1)){
  menu = 60;
  lpA = 0;
  lpB = 0;
}
if ((submenu == 4) && (lpA == 1 || lpB == 1)){
  lpA = 0;
  lpB = 0;
  gearRatioSetup = 1;
  menu = 0;
}
if ((submenu == 5) && (lpA == 1 || lpB == 1)){
  lpA = 0;
  lpB = 0;
  if (gearDisplay == 0){
    gearDisplay = 1;
    EEPROM.put(63, gearDisplay);
  }
  
  else if (gearDisplay == 1){
    gearDisplay = 0;
    EEPROM.put(63, gearDisplay);
  }
   
}
if ((submenu == 6) && (lpA == 1 || lpB == 1)){
  lpA = 0;
  lpB = 0;
  menu = 90;
}
if ((submenu == 7) && (lpA == 1 || lpB == 1)){
  lpA = 0;
  lpB = 0;
  menu = 110;
}
if ((submenu == 8) && (lpA == 1 || lpB == 1)){
  lpA = 0;
  lpB = 0;
  menu = 120;
}

if ((submenu == 9) && (lpA == 1 || lpB == 1)){
  lpA = 0;
  lpB = 0;
  menu = 200;
}
if ((submenu == 10) && (lpA == 1 || lpB == 1)){
  lpA = 0;
  lpB = 0;
  menu = 220;
}






}

if (menu == 90){

     if ((lpB == 1) || (lpA == 1)){
      lpA = 0;
      lpB = 0;
      menu = 10;
     }
    if ((spA == 1) || (spB == 1)){
      spA = 0;
      spB = 0;
    }



  
}

if (menu == 200){
submenu8 = constrain(submenu8, 0,1);
      if (spA == 1){
        spA = 0;
        spB = 0;
      submenu8++; 
      }
      if (spB == 1){
        spA = 0;
        spB = 0;
      submenu8--;
      }

      
     if (lpA == 1){
        lpA = 0;
        lpB = 0;
     if (submenu8 == 0){
        if (curentsensor == 0){
            curentsensor = 1;
            EEPROM.put(183,1); 
          }
          else if (curentsensor == 1){
            curentsensor = 0;
            EEPROM.put(183,0);
            }
        }
      else if (submenu8 == 1){
        menu = 201;
        }
      }
     if (lpB == 1){
      lpA = 0;
      lpB = 0;
      menu = 10;
     }
      
}
if (menu == 201){
      if (spA == 1){
        spA = 0;
        spB = 0;
        offset++;
      }
      if (spB == 1){
        spA = 0;
        spB = 0;
        offset --;
      }
      if (lpA == 1 || lpB == 1){
        lpA = 0;
        lpB = 0;
        EEPROM.put(170, offset);
        menu = 30;
      }
  
}
if (menu == 220){
submenu9 = constrain(submenu9, 0,2);
      if (spA == 1){
        spA = 0;
        spB = 0;
      submenu9++; 
      }
      if (spB == 1){
        spA = 0;
        spB = 0;
      submenu9--;
      }

     if (lpA == 1){
        lpA = 0;
        lpB = 0;
     if (submenu9 == 0){
        if (tpsinput == 0){
            tpsinput = 1;
            EEPROM.put(182,1); 
          }
          else if (tpsinput == 1){
            tpsinput = 0;
            EEPROM.put(182,0);
            }
        }
      else if ((submenu9 == 1) && (tpsinput == 1)){
        speedvstpssetupON = 1;
        }
        else if (submenu9 == 2){
          menu = 221;
        }




        
      }
     if (lpB == 1){
      lpA = 0;
      lpB = 0;
      menu = 10;
     }
  
}
if (menu == 221){
      submenu7 = constrain(submenu7, 0,2);
      if (spA == 1){
        spA = 0;
        spB = 0;
      submenu9++; 
      }
      if (spB == 1){
        spA = 0;
        spB = 0;
      submenu9--;
      }
      if (lpA == 1){
        lpA = 0;
        lpB = 0;      
         menu = 222;   
            }
      if (lpB == 1){
      lpA = 0;
      lpB = 0;
      menu = 220;
     }
            
}
if (menu == 222){
      if (spA == 1){
        spA = 0;
        spB = 0;
        if (submenu7 == 0){
          multilow = multilow + 0.01;
        }
        else if (submenu7 == 1){
          multimid = multimid + 0.01;
        }
        else if (submenu7 == 2){
          multihigh = multihigh + 0.01;
        }       
      }
      if (spB == 1){
        spA = 0;
        spB = 0;
             if (submenu7 == 0){
          multilow = multilow - 0.01;
        }
        else if (submenu7 == 1){
          multimid = multimid - 0.01;
        }
        else if (submenu7 == 2){
          multihigh = multihigh - 0.01;
        }
     }      
        if (lpA == 1 || lpB == 1){
        lpA = 0;
        lpB = 0;
          if (submenu7 == 0){
         EEPROM.put(195, multilow);
        }
        else if (submenu7 == 1){
         EEPROM.put(199, multimid);
        }
        else if (submenu7 == 2){
        EEPROM.put(203, multihigh);
        } 
        menu = 30;  
        }  
}





if (menu == 110){
submenu3 = constrain(submenu3, 0, 2);
if (spA == 1){
  spA = 0;
  spB = 0;
  submenu3++;
}
if (spB == 1){
  spA = 0;
  spB = 0;
  submenu3--; 
}
if ((submenu3 == 0) && (lpB == 1)){
  lpA = 0;
  lpB = 0;
  menu = 111;
}
if ((submenu3 == 1) && (lpB == 1)){
  lpA = 0;
  lpB = 0;
  menu = 112;
} 
if ((submenu3 == 2) && (lpB == 1)){
  lpA = 0;
  lpB = 0;


if (shiftlightON == 1){  
EEPROM.put(73,0);
shiftlightON = 0;
}
else if (shiftlightON == 0){
  EEPROM.put(73,1);
  shiftlightON = 1;
}

}
if (lpA == 1){
  lpA = 0;
  lpB = 0;
  menu = 10;
}


}

if (menu == 111){
  if (spA == 1){
      spA = 0;
      spB = 0;
      shiftlightStart = shiftlightStart + 100;
      }
  if (spB == 1){
      spA = 0;
      spB = 0;
      shiftlightStart = shiftlightStart - 100;
  
      }
if (lpA == 1 || lpB == 1){
  lpA = 0;
  lpB = 0;
EEPROM.put(77, shiftlightStart);
menu = 30;
  
}


                
}

 if (menu == 112){
  if (spA == 1){
      spA = 0;
      spB = 0;
      shiftlightEnd = shiftlightEnd + 100;
      }
  if (spB == 1){
      spA = 0;
      spB = 0;
      shiftlightEnd = shiftlightEnd - 100;
  
      }
if (lpA == 1 || lpB == 1){
  lpA = 0;
  lpB = 0;
EEPROM.put(81, shiftlightEnd);
menu = 30;
  
}


                
} 






submenu4 = constrain(submenu4, 0, 2);


if (menu == 60){
  if (spA == 1){
  submenu4 ++;
    spA = 0;
    spB = 0;
  }
  if (spB == 1){
    submenu4 --;
    spA = 0;
    spB = 0;
  }
if (lpA == 1){
  menu = 61;
  lpA = 0;
  lpB = 0;
}
if (lpB == 1){
  menu = 10;
  lpA = 0;
  lpB = 0;
}
}
submenu5 = constrain(submenu5, 0, 4);


if (menu == 61){
  if (spA == 1){
  submenu5 ++;
    spA = 0;
    spB = 0;
  }
  if (spB == 1){
    submenu5 --;
    spA = 0;
    spB = 0;
  }
if (lpA == 1){
  menu = 62;
  lpA = 0;
  lpB = 0;
}
if (lpB == 1){
  menu = 60;
  lpA = 0;
  lpB = 0;
}
}

if (menu == 62){
  if (spA == 1){
  shifttimearray[submenu4][submenu5] = shifttimearray[submenu4][submenu5] + 5;
    spA = 0;
    spB = 0;
  }
  if (spB == 1){
  shifttimearray[submenu4][submenu5] = shifttimearray[submenu4][submenu5] - 5;
    spA = 0;
    spB = 0;
  }
if (lpA == 1 || lpB == 1){
  menu = 61;
  lpA = 0;
  lpB = 0;
for (int i = 0; i <= 2; i++){
    
  for(int a = 0; a <= 4; a++){
  EEPROM.put(licznikeeprom, shifttimearray[i][a]);
  licznikeeprom = licznikeeprom + 4;
}
}
licznikeeprom = 85;
menu30();
delay(1500);
}
}









if (menu == 50){
if (spA == 1){
  PulsesPerRevolution = PulsesPerRevolution + 1;
  spA = 0;
  spB = 0;
}
if (spB == 1){
  PulsesPerRevolution = PulsesPerRevolution - 1;
  spA = 0; 
  spB = 0;
}
if (lpA == 1 || lpB == 1){
  EEPROM.put(30, PulsesPerRevolution);  
  lpA = 0;
  lpB = 0;
  menu = 30;
  }
}


if ((menu == 20) && (submenu1 == 0 || submenu1 == 1)){
if ((submenu2 == 0) && (spA == 1)){                  // poruszanie po menu 20
  submenu2 = 1;
  spA = 0;
}
if ((submenu2 == 1) && (spA == 1)){
  submenu2 = 2;
  spA = 0;
}
if ((submenu2 == 1) && (spB == 1)){
  submenu2 = 0;
  spB = 0;
}
if ((submenu2 == 2) && (spB == 1)){
  submenu2 = 1;
  spB = 0;
}
if ((submenu2 == 0) && (spB == 1)){
  spB = 0;
}
if ((submenu2 == 2) && (spA == 1)){              // koniec poruszania po menu 20
  spA = 0;
}
if ((submenu2 == 0) && (lpA == 1)){         // przejscie na ustawianie proportional low
  menu = 20;
  lpA = 0;
  lpB = 0;
  if(submenu1 == 0){
  submenu1 = 2;
  }
  if (submenu1 == 1){
    submenu1 = 5;
  }
}
if ((submenu2 == 1) && (lpA == 1)){         // przejscie na ustawiania intergral low
  menu = 20;
  lpA = 0;
  lpB = 0;
  if(submenu1 == 0){
  submenu1 = 3;
  }
  if (submenu1 == 1){
    submenu1 = 6;
  }
}
if ((submenu1 == 1 || submenu1 == 0) && (lpB == 1)){
  menu = 10;
  lpB = 0;
  submenu = 0;
  }

if ((submenu2 == 2) && (lpA == 1)){         // przejscie na ustawianie derivative low
  menu = 20;
  lpA = 0;
  lpB = 0;
  if(submenu1 == 0){
  submenu1 = 4;
  }
  if (submenu1 == 1){
    submenu1 = 7;
  }
}
}
if ((menu == 20) && (submenu1 >= 2) && (submenu1 <=7)){        // ustawianie proportional low i high
if (spA == 1){
  if (submenu1 == 2){
  Kpl = Kpl + 0.01;
  spA = 0;
  }
  if (submenu1 == 3){
  Kil = Kil + 0.01;
  spA = 0;  
  }
  if (submenu1 == 4){
    Kdl = Kdl + 0.01;
    spA = 0;
    }
         if (submenu1 == 5){
         Kph = Kph + 0.01;
          spA = 0;
         }
        if (submenu1 == 6){
        Kih = Kih + 0.01;
        spA = 0;  
        }
        if (submenu1 == 7){
         Kdh = Kdh + 0.01;
         spA = 0;
        }
}
if (spB == 1){
  if (submenu1 == 2){
  Kpl = Kpl - 0.01;
  spB = 0;
  }
  if (submenu1 == 3){
    Kil = Kil - 0.01;
  spB = 0;
  }
  if (submenu1 == 4){
    Kdl = Kdl - 0.01;
    spB = 0;
  }
if (submenu1 == 5){
  Kph = Kph - 0.01;
  spB = 0;
  }
  if (submenu1 == 6){
    Kih = Kih - 0.01;
  spB = 0;
  }
  if (submenu1 == 7){
    Kdh = Kdh - 0.01;
    spB = 0;
  }

}
if (lpA == 1 || lpB == 1){
  if (submenu1 == 2){
  EEPROM.put(12, Kpl);  
  lpA = 0;
  lpB = 0;
  menu = 30;
  }
  if (submenu1 == 3){
  EEPROM.put(16, Kil);  
  lpA = 0;
  lpB = 0;
  menu = 30;  
  }
  if (submenu1 == 4){
    EEPROM.put(20, Kdl);
    lpA = 0;
    lpB = 0;
    menu = 30;
    }
         if (submenu1 == 5){
          EEPROM.put(0, Kph);
          lpA = 0;
          lpB = 0;
          menu = 30;
         }
        if (submenu1 == 6){
          EEPROM.put(4, Kih);
        lpA = 0;  
        lpB = 0;
        menu = 30;
        }
        if (submenu1 == 7){
          EEPROM.put(8, Kdh);
         lpA = 0;
         lpB = 0;
         menu = 30;
        }
}
}
if ((menu == 66) && (lpA == 1 || lpB == 1)){
  lpA = 0;
  lpB = 0;
  menu = 10;
}










// koniec poruszania pa menu
if (Input >= 100){
  interval9 = 1000;
}
else{
  interval9 = 250;
}




if ((currtime - prevtime9 >= interval9)){


if (menu == 0){
  menu0();
}
if (menu == 40){
  menu40();
}
if (predkosc == 0){
if (menu == 10){
  menu10();
              }
if (menu == 20){
  menu20();
              }
if (menu == 30){
menu30();
delay(1000);
if (submenu == 2 || submenu == 3){
  menu = 10; 
              }
else if (submenu == 7){
  menu = 110;              
}
else if (submenu == 9){
  menu = 200;
}
else if (submenu == 10){
  menu = 220;
}
else{
menu = 20;
if((submenu1 >=2) && (submenu1 <=  4)){
  submenu1 = 0;
                    }
else if ((submenu1 >=5) && (submenu1 <= 7)){
  submenu1 = 1;
                    }  
                }
        }
if (menu == 70){
  if (QSchange == 1){
  if (QSon == 1){
  display.clearDisplay();
  display.drawBitmap(0, 0, qson, 128 , 64, 1);
  display.display();
  //delay(1500);
  prevtime10 = millis();
    QSchange = 0;
}
else if (QSon == 0){
  display.clearDisplay();
  display.drawBitmap(0, 0, qsoff, 128 , 64, 1);
  display.display();
//  delay(1500);
prevtime10 = millis();
QSchange = 0;
}
  }
  if (millis() - prevtime10 >= interval10){
  menu = 0;
  }

}
        
if (menu == 50){
  menu50();
}
else if (menu == 61){
  menu61();
}
else if (menu == 62){
  menu62();
}

else if (menu == 60){
  menu60();
}
else if (menu == 90){
  menu90();
}
else if (menu == 110){
  menu110();
}
else if (menu == 111){
  menu111();
}
else if (menu == 112){
  menu112();
}
else if (menu == 120){
  menu120();
}
else if (menu == 140){
  menu140();
}
else if (menu == 200){
  menu200();
}
else if (menu == 201){
  menu201();
}
else if (menu == 220){
  menu220();
}
else if (menu == 201){
  menu201();
}
else if (menu == 221){
  menu221();
}
else if (menu == 222){
  menu222();
}

}


prevtime9 = currtime;
}



if ((menu == 0) && (lpA == 1) && (lpB == 0) && (Input == 0) && (servosweepup == 0) && (servosweepdown == 0) && (averageRPM1 <500)){
  servosweepup = 1;
  lpA = 0;
  lpB = 0;
  tpsmin = tpsraw;
  EEPROM.put(191, tpsmin);

}
if ((servosweepup == 1) && (servosweepdown  == 0) && (Input == 0)){
  Output = 1550;

  
if (servoangle == 0){
  curentTreshholdarray[Xinput] = curentdrow;                                 // seting curentlimit
}
else if (servoangle > 60){
  curentTreshholdarray[Xinput] = curentdrow;  
}
else if (servoangle > 120){
  curentTreshholdarray[Xinput] = curentdrow;  
}
else if (servoangle > 180){
  curentTreshholdarray[Xinput] = curentdrow;  
}
else if (servoangle > 240){
  curentTreshholdarray[Xinput] = curentdrow;  
}
else if (servoangle > 300){
  curentTreshholdarray[Xinput] = curentdrow;  
}
else if (servoangle > 360){
  curentTreshholdarray[Xinput] = curentdrow;  
}
else if (servoangle > 420){
  curentTreshholdarray[Xinput] = curentdrow;  
}
else if (servoangle > 480){
  curentTreshholdarray[Xinput] = curentdrow;  
}
else if (servoangle > 540){
  curentTreshholdarray[Xinput] = curentdrow;  
}
else if (servoangle > 600){
  curentTreshholdarray[Xinput] = curentdrow;  
}
else if (servoangle > 650){
  curentTreshholdarray[11] = curentdrow;                         // end of curent limit setup
}
  
}
if ((servosweepup == 1) && (servosweepdown == 0) && (angle >= 1550)){
  servosweepup = 0;
  servosweepdown = 1;
  tpsmax = tpsraw;
  EEPROM.put(193, tpsmax);
  tps = map(tpsraw, tpsmin, tpsmax, 0, 100);
for (int c = 0; c <= 11; c++){
  EEPROM.put(curentlicznik, curentTreshholdarray[c]);
  curentlicznik = curentlicznik +2;
}
curentlicznik = 146;
  
}
if ((servosweepup == 0) && (servosweepdown == 1)){
  Output = 900;
if ((tps <= 100) && (tps >75)){
 tpsanglearray[4] = angle; 
}
else if ((tps <= 75) && (tps > 50)){
  tpsanglearray[3] = angle;
}
else if ((tps <= 50) && (tps >25)){
  tpsanglearray[2] = angle;
}
else if (tps <= 25){
  tpsanglearray[1] = angle;
}
}

if ((servosweepup == 0) && (servosweepdown == 1) && (angle <=900)){
  servosweepdown = 0;
  angle = 900;
  if (curentsensor == 1){
  krancowka = 1;
  EEPROM.put(211, krancowka);
  }
  tpsanglearray[0] = angle;
for (int c = 0; c <= 4; c++){
  EEPROM.put(curentlicznik1, tpsanglearray[c]);
  curentlicznik1 = curentlicznik1 + 2;
}
curentlicznik1 = 172;
if (tpsinput == 1){
tpsvsanglesetup = 1;    // eprom 184 do zapisania
EEPROM.put(184, tpsvsanglesetup);
}

  
}








////////////////////QUICKSHIFTER///////////////////////
if (QSon == 1){
if ((QSsensor == LOW) && (averageRPM1 > 2000) && (shiftready == 1) && (shifting == 0)){
licznikQS ++;
if (licznikQS > 5){
shiftready = 0;
shifting = 1;
digitalWrite(relay, HIGH);
currtime = millis();
previousMillisQS = currtime;
previousMillisQS1 = currtime;
licznikQS = 0;
}
}
currtime = millis();
if (currtime - previousMillisQS >= shifttime) {
digitalWrite(relay, LOW);
shifting = 0;
}

if ((shiftready == 0) && (shifting == 0) && (QSsensor == HIGH) && (currtime - previousMillisQS1 >= shiftinterval)){
  shiftready = 1;
}
if (QSsensor == LOW){
  digitalWrite(ledPin, LOW);
}
else{
  digitalWrite(ledPin, HIGH);
}
if ((QSsensor == HIGH) && (licznikQS > 0)){
  licznikQS = 0;
}
}
////////////////QUISCKSHIFTER END/////////////////////////

////////////////shiftlight/////////////////////

if (shiftlightON == 1){
/*
//Serial.begin(9600);
if ((averageRPM < shiftlightStart - 200) && (shiftled == 0)){
  shiftled = 0;
}
else if ((averageRPM >= shiftlightStart) && (shiftled == 0)){
  shiftled = 1;

}
else if ((averageRPM < (shiftlightStart - 75)) && (shiftled == 1)){
  shiftled = 0;

}
else if ((averageRPM >= (shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.25))) && (shiftled == 1)){
  shiftled = 2;

}
else if ((averageRPM < ((shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.25)) - 75)) && (shiftled == 2)){
  shiftled = 1;

}
else if ((averageRPM >= (shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.5))) && (shiftled == 2)){
  shiftled = 3;

}
else if ((averageRPM < ((shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.5)) - 75)) && (shiftled == 3)){
  shiftled = 2;

}
else if ((averageRPM >= (shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.75))) && (shiftled == 3)){
  shiftled = 4;

}
else if ((averageRPM < ((shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.75)) - 75)) && (shiftled == 4)){
  shiftled = 3;

}
else if ((averageRPM >= shiftlightEnd) && (shiftled == 4)){
  shiftled = 5;

}
else if ((averageRPM < (shiftlightEnd - 75)) && (shiftled == 5)){
  shiftled = 4;

}
else if ((averageRPM > (shiftlightEnd + 200)) && (shiftled == 5)){
  shiftled = 6;

}
else if ((averageRPM < (shiftlightEnd + 75)) && (shiftled == 6)){
  shiftled = 5;

}
*/

if (averageRPM < shiftlightStart - 200){
  shiftled = 0;
}
else if ((averageRPM >= shiftlightStart) && (averageRPM <= ((shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.2)) - 55))){
  shiftled = 1;

}
//else if ((averageRPM < (shiftlightStart - 75)) && (shiftled == 1)){
//  shiftled = 0;

//}
else if ((averageRPM >= (shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.2))) && (averageRPM <= ((shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.4)) - 55))){
  shiftled = 2;

}
//else if ((averageRPM < ((shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.25)) - 75)) && (shiftled == 2)){
//  shiftled = 1;
//
//}
else if ((averageRPM >= (shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.4))) && (averageRPM <= ((shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.6)) - 55))){
  shiftled = 3;

}
//else if ((averageRPM < ((shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.5)) - 75)) && (shiftled == 3)){
//  shiftled = 2;
//
//}
else if ((averageRPM >= (shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.6))) && (averageRPM <= ((shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.8)) - 55))){
  shiftled = 4;

}
//else if ((averageRPM < ((shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.75)) - 75)) && (shiftled == 4)){
// shiftled = 3;
//
//}
else if ((averageRPM >= (shiftlightStart + ((shiftlightEnd - shiftlightStart) * 0.8))) && (averageRPM <= shiftlightEnd)){
  shiftled = 5;

}
//else if ((averageRPM < (shiftlightEnd - 75)) && (shiftled == 5)){
//  shiftled = 4;

//}
else if (averageRPM > (shiftlightEnd + 200)){
  shiftled = 6;

}
//else if ((averageRPM < (shiftlightEnd + 75)) && (shiftled == 6)){
//  shiftled = 5;

//}


}

//////////////////////BT//////////////
if (BTon == 1){
if (Serial2.available() > 0){
bluetooth();
}
}

/////////////////////BT end////////////////////

currtime = millis();
if (currtime - BlinkPrev >= SerialInterval){
  BlinkPrev = currtime;
    Serial1.write('m');
    Serial1.write(menu);
    Serial1.write(submenu);
    Serial1.write(submenu1);
    Serial1.write(submenu2);   
    Serial1.write(submenu3);
    Serial1.write(submenu4);
    Serial1.write(submenu5);
    Serial1.write(submenu8);
    Serial1.write(submenu9);
    Serial1.write(submenu7);
    Serial1.write(rgbsetupON);
    Serial1.write(ledDataSent);

  
if ((menu == 0) || (menu == 10) || (menu == 70)) {
  int serialint;
  shiftChange = 110 - shiftled;
  Serial1.write('>');
  Serial1.write(shiftled);
  Serial1.write(shiftChange);
  if (stansetspeed == LOW){
    Serial1.write(1);
  }
  else if (stansetspeed == HIGH){
    Serial1.write(0);
  }
  if (stancancel == LOW){
    Serial1.write(1);
  }
  else if (stancancel == HIGH){
    Serial1.write(0);
  }
  if (stanham == LOW){
    Serial1.write(1);
  }
  else if (stanham == HIGH){
    Serial1.write(0);
  }
    if (QSon == 0){
      Serial1.write(0);
    }
  else{
    Serial1.write(1);
  }
  //  Serial1.write(QSon);
    Serial1.write(gear);
    Serial1.write(gearRatioSetup);
    Serial1.write(gearRatioSet);
    Serial1.write(gearDisplay);
    Serial1.write(speedvstpssetupON);
    Serial1.write(speed1set);
    Serial1.write(speed2set);
    Serial1.write(speed3set);
    Serial1.write(speed4set);
    Serial1.write(curentsensor);
    Serial1.write(tpsinput);

    
    serialint = predkosc;
    Serial1.print(serialint);
    Serial1.write('|');
    Serial1.print(averageRPM1);
    Serial1.write('|');
    serialint = Input;
    Serial1.print(serialint);
    Serial1.write('|');
    
    
}

//else if ((menu == 0) && (Input > 100)){
//  int serialint;
//  shiftChange = 110 - shiftled;
//  Serial.write('c');
//  Serial.write(shiftled);
//  Serial.write(shiftChange);
//  
//    Serial.write(gear);
//    serialint = Input;
//    Serial.print(serialint);
//    Serial.write('|');
//}
if (menu == 10){
  Serial1.write('a');
  Serial1.write(gearDisplay);
}

else if (menu == 20){
    Serial1.write('d');
    Serial1.print(Kpl);
    Serial1.write('|');
    Serial1.print(Kil);
    Serial1.write('|');
    Serial1.print(Kdl);
    Serial1.write('|');
    Serial1.print(Kph);
    Serial1.write('|');
    Serial1.print(Kih);
    Serial1.write('|');
    Serial1.print(Kdh);
    Serial1.write('|');
    
  }


if (menu == 50){
  Serial1.write('f');
    Serial1.write(PulsesPerRevolution);
  }
if (menu == 60){
  int serialint;
  Serial1.write('j');
 serialint = shifttime;
 Serial1.print(serialint);
 Serial1.write('|');
}

if (menu == 111){
  int serialint;
  Serial1.write('o');
  serialint = shiftlightStart;
  Serial1.print(serialint);
  Serial1.write('|');
}
if (menu == 110){
  Serial1.write('r');
  Serial1.write(shiftlightON);
}
if (menu == 112){
  int serialint;
  Serial1.write('t');
  serialint = shiftlightEnd;
  Serial1.print(serialint);
  Serial1.write('|');
}
if (menu == 90){
  float temp;
  Serial1.write('y');
  temp = ratio1;
  Serial1.print(temp);
  Serial1.write('|');
  temp = ratio2;
  Serial1.print(temp);
  Serial1.write('|');
  temp = ratio3;
  Serial1.print(temp);
  Serial1.write('|');
  temp = ratio4;
  Serial1.print(temp);
  Serial1.write('|');
  temp = ratio5;
  Serial1.print(temp);
  Serial1.write('|');
  temp = ratio6;
  Serial1.print(temp);
  Serial1.write('|');  
}
if (menu == 62){
  float temp;
     Serial1.write('Q');
     //for (int i = 0; i <= 2; i++){
      //  for(int a = 0; a <= 4; a++){
      //byte buff[4] = {shifttimearray[i][a]};
          temp = shifttimearray[submenu4][submenu5];        
          Serial1.print(temp);
          Serial1.write('|');
          //Serial.println(shifttimearray[i][a]);
          }
      

  

if (menu == 201){
Serial1.write('Z');
Serial1.write(offset);


  
}
else if (menu == 222){
  Serial.write('M');
  Serial1.print(multilow);
  Serial1.write('|');
  Serial1.print(multimid);
  Serial1.write('|');
  Serial1.print(multihigh);
  Serial1.write('|');  
}



if (gearRatioSetup == 1){
  Serial1.write('G');
  Serial1.write(gear1setup);
  Serial1.write(gear2setup);
  Serial1.write(gear3setup);
  Serial1.write(gear4setup);
  Serial1.write(gear5setup);
  Serial1.write(gear6setup);
  
}

if (rgbsetupON == 1){
  Serial1.write('L');
  Serial1.write(led1setupON);
  Serial1.write(led2setupON);
  Serial1.write(led3setupON);
  Serial1.write(led4setupON);
  Serial1.write(led5setupON);
  Serial1.write(ledendsetupON);
  if (led1setupON == 1){
      Serial1.write(red1);
      Serial1.write(green1);
      Serial1.write(blue1);
      ledDataSent = 1;    
  }
  else if (led2setupON == 1){
      Serial1.write(red2);
      Serial1.write(green2);
      Serial1.write(blue2);
      ledDataSent = 1;
  }
  else if (led3setupON == 1){
    Serial1.write(red3);
    Serial1.write(green3);
    Serial1.write(blue3);
    ledDataSent = 1;
  }
  else if (led4setupON == 1){
    Serial1.write(red4);
    Serial1.write(green4);
    Serial1.write(blue4);
    ledDataSent = 1;
  }
  else if (led5setupON == 1){
    Serial1.write(red5);
    Serial1.write(green5);
    Serial1.write(blue5);
    ledDataSent = 1;
  }
  else if (ledendsetupON == 1){
    Serial1.write(rend);
    Serial1.write(gend);
    Serial1.write(bend);
    ledDataSent = 1;
  }
  Serial1.write(saveRGB);
  if (saveRGB == 1){
    saveRGB = 0;
    rgbsetupON = 0;
  }
  
}
  
}

if (Serial1.available() > 17){
    int tstart;
    if (ledDataSent == 0){
    tstart = Serial1.read();
    if (tstart == 'R'){
      red1 = Serial1.read();
      green1 = Serial1.read();
      blue1 = Serial1.read();
      red2 = Serial1.read();
      green2 = Serial1.read();
      blue2 = Serial1.read();
      red3 = Serial1.read();
      green3 = Serial1.read();
      blue3 = Serial1.read();
      red4 = Serial1.read();
      green4 = Serial1.read();
      blue4 = Serial1.read();
      red5 = Serial1.read();
      green5 = Serial1.read();
      blue5 = Serial1.read();
      rend = Serial1.read();
      gend = Serial1.read();
      bend = Serial1.read();
      ledDataSent = 1;
      Serial1.write(ledDataSent);

    }    
} else {
byte erase;
for (int i = 0; i <= 17; i++){
  erase = Serial1.read();
}

  
}
}


  


//Serial.println(CaseButton1);
//Serial.println(CaseButton2);
//Serial.println(licznikA);
//Serial.println(licznikB);


}
//else if (shiftled <= 5)
//  shiftlights();
//}
//Serial.end();






















     
void Pulse_Event()  // The interrupt runs this to calculate the period between pulses:
{

  PeriodBetweenPulses = micros() - LastTimeWeMeasured; 
//   if (licznik > 500) 
//{ 
//   if (PeriodBetweenPulses >= (prevperiod*0.65))
//{                                                  
//  LastTimeWeMeasured = micros();  
//  prevperiod = PeriodBetweenPulses;
//  if(PulseCounter >= AmountOfReadings)  
//  {
//    PeriodAverage = PeriodSum / AmountOfReadings;
//    PulseCounter = 1; 
//    PeriodSum = PeriodBetweenPulses;
//    int RemapedAmountOfReadings = map(PeriodBetweenPulses, 11000, 800, 1, 140);
//    RemapedAmountOfReadings = constrain(RemapedAmountOfReadings, 1, 140);  
//    AmountOfReadings = RemapedAmountOfReadings; 
//  }
//  else
//  {
//    PulseCounter++; 
//    PeriodSum = PeriodSum + PeriodBetweenPulses;  
//  
// }
//
//
//  }
//   }
//else 
//{
 LastTimeWeMeasured = micros();  
//prevperiod = PeriodBetweenPulses;
  if(PulseCounter >= AmountOfReadings)  
  {
    PeriodAverage = PeriodSum / AmountOfReadings; 
    PulseCounter = 1; 
    PeriodSum = PeriodBetweenPulses; 
    int RemapedAmountOfReadings = map(PeriodBetweenPulses, 11000, 800, 1, 140);
    RemapedAmountOfReadings = constrain(RemapedAmountOfReadings, 1, 140);  
    AmountOfReadings = RemapedAmountOfReadings;  
  }
  else
  {
    PulseCounter++; 
    PeriodSum = PeriodSum + PeriodBetweenPulses;  
  
 }  
//licznik++;
}



void menu0()          // menu0 poczatek
{
if (speedvstpssetupON == 1){
    if (speed1set == 0){
      display.clearDisplay();
      display.setTextSize(5);
      display.setTextColor(WHITE);   
      display.setCursor(0, 0);
      strcpy_P(buffer, (char *)pgm_read_word(&(string_table[77])));
      display.print(buffer);        
      display.display();
    }
    else if ((speed1set == 1) && (speed2set == 0)){
                    display.clearDisplay();
                    display.setTextSize(5);
                    display.setTextColor(WHITE);   
                    display.setCursor(0, 0);
                    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[78])));
                    display.print(buffer);        
                    display.display();      
                    }
                else if ((speed1set == 1) && (speed2set == 1) && (speed3set == 0)){
                        display.clearDisplay();
      display.setTextSize(5);
      display.setTextColor(WHITE);   
      display.setCursor(0, 0);
      strcpy_P(buffer, (char *)pgm_read_word(&(string_table[79])));
      display.print(buffer);        
      display.display();
                }
                else if((speed1set == 1) && (speed2set == 1) && (speed3set == 1) && (speed4set == 0)){
                        display.clearDisplay();
      display.setTextSize(5);
      display.setTextColor(WHITE);   
      display.setCursor(0, 0);
      strcpy_P(buffer, (char *)pgm_read_word(&(string_table[80])));
      display.print(buffer);        
      display.display();
                }

}
  
else if (gearRatioSetup == 1){
    if (gear1setup == 0){
       display.clearDisplay();
        display.drawBitmap(0, 0,  gear1, 128, 64, 1);
         display.display();
    }
      else if ((gear1setup == 1) && (gear2setup == 0)){
        display.clearDisplay();
        display.drawBitmap(0, 0,  gear2, 128, 64, 1);
         display.display();
      }
      else if ((gear1setup == 1) && (gear2setup == 1) && (gear3setup == 0)){
         display.clearDisplay();
        display.drawBitmap(0, 0,  gear3, 128, 64, 1);
         display.display();
      }
      else if ((gear1setup == 1) && (gear2setup == 1) && (gear3setup == 1) && (gear4setup == 0)){
          display.clearDisplay();
        display.drawBitmap(0, 0,  gear4, 128, 64, 1);
         display.display();
      }
      else if ((gear1setup == 1) && (gear2setup == 1) && (gear3setup == 1) && (gear4setup == 1) && (gear5setup == 0)){
          display.clearDisplay();
        display.drawBitmap(0, 0,  gear5, 128, 64, 1);
         display.display();
      }
      else if ((gear1setup == 1) && (gear2setup == 1) && (gear3setup == 1) && (gear4setup == 1) && (gear5setup == 1) && (gear6setup == 0)){
          display.clearDisplay();
        display.drawBitmap(0, 0,  gear6, 128, 64, 1);
         display.display();
      }
} else {



  if ((Input > 100) && ((gearRatioSet == 0) && (gearDisplay == 1) || (gearRatioSet == 1) && (gearDisplay == 0) || (gearRatioSet == 0) && (gearDisplay == 0))){
 display.clearDisplay();
 display.drawBitmap(0, 0,  Ready, 128, 64, 1);
 display.display();
 }
else if ((Input > 0 ) && (gearRatioSet == 1) && (gearDisplay == 1) && (gearRatioSetup == 0)){
  if (gear == 1){
display.clearDisplay();
        display.drawBitmap(0, 0,  gear1, 128, 64, 1);
         display.display();   
          }
         else if (gear == 2){
            display.clearDisplay();
        display.drawBitmap(0, 0,  gear2, 128, 64, 1);
         display.display();
          }
           else if (gear == 3){
              display.clearDisplay();
        display.drawBitmap(0, 0,  gear3, 128, 64, 1);
         display.display();
            }
             else if (gear == 4){
                display.clearDisplay();
        display.drawBitmap(0, 0,  gear4, 128, 64, 1);
         display.display();
              }
                     else if (gear == 5){
                        display.clearDisplay();
        display.drawBitmap(0, 0,  gear5, 128, 64, 1);
         display.display();
                      }
                         else if (gear == 6){
                            display.clearDisplay();
        display.drawBitmap(0, 0,  gear6, 128, 64, 1);
         display.display();
                          }
                              else if (gear == 0){
                                display.clearDisplay();
        display.drawBitmap(0, 0,  gearN, 128, 64, 1);
         display.display();
                              }
                          }




 
else {
display.clearDisplay();
display.setTextSize(1);
display.setTextColor(WHITE);   
display.setCursor(0, 0);
strcpy_P(buffer, (char *)pgm_read_word(&(string_table[0])));
display.print(buffer);
if (stansetspeed == LOW){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);
 }
else if(stansetspeed == HIGH) {
 strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
}
strcpy_P(buffer, (char *)pgm_read_word(&(string_table[1])));
display.print(buffer);
if (stancancel == LOW){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);
}
else if(stancancel == HIGH){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
}
strcpy_P(buffer, (char *)pgm_read_word(&(string_table[2])));
display.print(buffer);
if (stanham == LOW){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);
}
else if (stanham == HIGH){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
}
display.setTextSize(1);
display.setTextColor(WHITE);
strcpy_P(buffer, (char *)pgm_read_word(&(string_table[3])));
display.print(buffer);
display.println(predkosc);
strcpy_P(buffer, (char *)pgm_read_word(&(string_table[22])));
display.print(buffer);
if (QSon == 1){
strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
display.println(buffer);  
}
else if (QSon == 0){
strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));  
display.println(buffer);
}
strcpy_P(buffer, (char *)pgm_read_word(&(string_table[25])));
  display.print(buffer);
  display.print(averageRPM1);


display.display();
}               // menu0 koniec
}
}
void menu10()
{
display.clearDisplay();
display.setTextSize(1);   
display.setTextColor(WHITE);
display.setCursor(0, 0);
strcpy_P(buffer, (char *)pgm_read_word(&(string_table[19])));
  display.println(buffer);
  if (submenu == 0){
   strcpy_P(buffer, (char *)pgm_read_word(&(string_table[16]))); 
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[7])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[8])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[17])));
  display.println(buffer);
   strcpy_P(buffer, (char *)pgm_read_word(&(string_table[23])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[26])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[28])));
  display.print(buffer);
  if (gearDisplay == 1){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);
  }
   else{
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[30])));
  display.print(buffer);
}
if (submenu == 1){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[7])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[16])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[8])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[17])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[23])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[26])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[28])));
  display.print(buffer);
  if ((gearDisplay == 1) && (gearRatioSet == 1)){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);
  }
  else{
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
      strcpy_P(buffer, (char *)pgm_read_word(&(string_table[30])));
  display.print(buffer);
}
if (submenu == 2){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[7])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[8])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[18])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[23])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[26])));
  display.println(buffer);  
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[28])));
  display.print(buffer);
  if ((gearDisplay == 1) && (gearRatioSet == 1)){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);
  }
  else{
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
      strcpy_P(buffer, (char *)pgm_read_word(&(string_table[30])));
  display.print(buffer);
}
if (submenu == 3){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[7])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[8])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[17])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[24])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[26])));
  display.println(buffer);    
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[28])));
  display.print(buffer);
  if ((gearDisplay == 1) && (gearRatioSet == 1)){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);
  }
  else{
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
      strcpy_P(buffer, (char *)pgm_read_word(&(string_table[30])));
  display.print(buffer);
}
if (submenu == 4){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[7])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[8])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[17])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[23])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[27])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[28])));
  display.print(buffer);
  if ((gearDisplay == 1) && (gearRatioSet == 1)){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);
  }
  else{
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
      strcpy_P(buffer, (char *)pgm_read_word(&(string_table[30])));
  display.print(buffer);
}
if (submenu == 5){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[7])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[8])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[17])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[23])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[26])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[29])));
  display.print(buffer);
  if ((gearDisplay == 1) && (gearRatioSet == 1)){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);
  }
  else{
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[30])));
  display.print(buffer);


  
}
if (submenu == 6){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[7])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[8])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[17])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[23])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[26])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[28])));
  display.print(buffer);
  if ((gearDisplay == 1) && (gearRatioSet == 1)){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);
  }
  else{
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[31])));
  display.print(buffer);


  
}   
if (submenu == 7){

  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[8])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[17])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[23])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[26])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[28])));
  display.print(buffer);
  if ((gearDisplay == 1) && (gearRatioSet == 1)){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);
  }
  else{
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[30])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[42])));
  display.println(buffer);

  
}      
if (submenu == 8){



  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[17])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[23])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[26])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[28])));
  display.print(buffer);
  if ((gearDisplay == 1) && (gearRatioSet == 1)){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);
  }
  else{
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[30])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[38])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[62])));
  display.println(buffer);
  
}      
     
if (submenu == 9){



  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[23])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[26])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[28])));
  display.print(buffer);
  if ((gearDisplay == 1) && (gearRatioSet == 1)){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);
  }else{
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[30])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[38])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[63])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[65])));
  display.println(buffer);
  
}    
if (submenu == 10){




  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[26])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[28])));
  display.print(buffer);
  if ((gearDisplay == 1) && (gearRatioSet == 1)){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);
  }else{
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[30])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[38])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[63])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[66])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[68])));
  display.println(buffer);  
}   
   
   
   
   
   display.display();
  }



void menu20()
{
display.clearDisplay();
display.setTextSize(1);
display.setTextColor(WHITE);   
display.setCursor(0, 0);

  
 if (submenu1 == 0){              
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[7])));
  display.println(buffer);
  if( submenu2 == 0){
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[9])));
    display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[12])));  
     display.println(buffer);
     strcpy_P(buffer, (char *)pgm_read_word(&(string_table[14])));
      display.print(buffer);
  }
if (submenu2 == 1){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[10])));
display.println(buffer);
strcpy_P(buffer, (char *)pgm_read_word(&(string_table[11])));
     display.println(buffer);
     strcpy_P(buffer, (char *)pgm_read_word(&(string_table[14])));
      display.print(buffer);
}
if (submenu2 == 2){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[10])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[12])));   
     display.println(buffer);
     strcpy_P(buffer, (char *)pgm_read_word(&(string_table[13])));
      display.print(buffer);     
}
}
if (submenu1 == 1){              
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[6])));
  display.print(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[8])));
  display.println(buffer);
  if( submenu2 == 0){
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[9])));
    display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[12])));  
     display.println(buffer);
     strcpy_P(buffer, (char *)pgm_read_word(&(string_table[14])));
      display.print(buffer);
  }
if (submenu2 == 1){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[10])));
display.println(buffer);
strcpy_P(buffer, (char *)pgm_read_word(&(string_table[11])));
     display.println(buffer);
     strcpy_P(buffer, (char *)pgm_read_word(&(string_table[14])));
      display.print(buffer);
}
if (submenu2 == 2){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[10])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[12])));   
     display.println(buffer);
     strcpy_P(buffer, (char *)pgm_read_word(&(string_table[13])));
      display.print(buffer);      
}
}
if(submenu1 == 2 || submenu1 == 5){
display.setCursor(0, 25);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[9])));
    display.print(buffer);
  if(submenu1 == 2){
    display.print(Kpl);
  }
 if(submenu1 == 5){
  display.print(Kph);
 }
}
if(submenu1 == 3 || submenu1 == 6){
display.setCursor(0, 25);
 strcpy_P(buffer, (char *)pgm_read_word(&(string_table[12])));  
     display.print(buffer);
  if(submenu1 == 3){
    display.print(Kil);
  }
 if(submenu1 == 6){
  display.print(Kih);
 }
}
if(submenu1 == 4 || submenu1 == 7){
 display.setCursor(0, 25);
 strcpy_P(buffer, (char *)pgm_read_word(&(string_table[14])));
      display.print(buffer);
  if(submenu1 == 4){
    display.print(Kdl);
  }
 if(submenu1 == 7){
  display.print(Kdh);
 }
}
display.display();
}
void menu30()
{
display.clearDisplay();
display.setTextSize(1);
display.setTextColor(WHITE);   
display.setCursor(25, 30);
strcpy_P(buffer, (char *)pgm_read_word(&(string_table[15])));
      display.print(buffer);
display.display();
}
void menu40()
{
 display.clearDisplay();
 display.drawBitmap(0, 0,  cruise, 128, 64, 1);
 display.display();
}
void menu50()
{
display.clearDisplay();
display.setTextSize(1);  
display.setTextColor(WHITE);
display.setCursor(0, 25);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[20])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[21])));
  display.print(buffer); 
  display.print(PulsesPerRevolution);
   display.display(); 
}
void menu60()
{
display.clearDisplay();
display.setTextSize(1);  
display.setTextColor(WHITE);
display.setCursor(0, 10);
if (submenu4 == 0){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[49])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[47])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[48])));
  display.println(buffer);
}
else if (submenu4 == 1){

  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[46])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[50])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[48])));
  display.println(buffer);
}

else if (submenu4 == 2){

  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[46])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[47])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[51])));
  display.println(buffer);
}


  
   display.display(); 
}
void menu61()
{
display.clearDisplay();
display.setTextSize(1);  
display.setTextColor(WHITE);
display.setCursor(0, 10);

if (submenu5 == 0){
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[57])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[53])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[54])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[55])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[56])));
  display.println(buffer);
}
else if (submenu5 == 1){
      strcpy_P(buffer, (char *)pgm_read_word(&(string_table[52])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[58])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[54])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[55])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[56])));
  display.println(buffer);
}
else if (submenu5 == 2){
      strcpy_P(buffer, (char *)pgm_read_word(&(string_table[52])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[53])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[59])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[55])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[56])));
  display.println(buffer);
}
else if (submenu5 == 3){
      strcpy_P(buffer, (char *)pgm_read_word(&(string_table[52])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[53])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[54])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[60])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[56])));
  display.println(buffer);
}
else if (submenu5 == 4){
      strcpy_P(buffer, (char *)pgm_read_word(&(string_table[52])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[53])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[54])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[55])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[61])));
  display.println(buffer);
}

   display.display(); 
  
}

void menu62(){
display.clearDisplay();
display.setTextSize(1);  
display.setTextColor(WHITE);
display.setCursor(0, 25);
display.print(shifttimearray[submenu4][submenu5]);

   display.display();


  
}



  
void Pulse_EventRPM()  // The interrupt runs this to calculate the period between pulses:
{

// PeriodBetweenPulsesRPM1 = micros() - LastTimeWeMeasuredRPM1; 
// LastTimeWeMeasuredRPM1 = micros();  

//if (PeriodBetweenPulsesRPM1 > (prevperiod * 1.5)){
//  if (TeethCounter >= UpdatedNrOfTeeth){
  PeriodBetweenPulsesRPM = micros() - LastTimeWeMeasuredRPM;
 LastTimeWeMeasuredRPM = micros();
// TeethCounter = 0;
// UpdatedNrOfTeeth = NrOfTeeth;

  if(PulseCounterRPM >= AmountOfReadingsRPM)  
  {
    PeriodAverageRPM = PeriodSumRPM / AmountOfReadingsRPM; 
    PulseCounterRPM = 1; 
    PeriodSumRPM = PeriodBetweenPulsesRPM; 
    int RemapedAmountOfReadingsRPM = map(PeriodBetweenPulsesRPM, 2000, 300, 24, 100);
    RemapedAmountOfReadingsRPM = constrain(RemapedAmountOfReadingsRPM, 24, 100);  
    AmountOfReadingsRPM = RemapedAmountOfReadingsRPM;  
  }
  else
  {
        if (PeriodBetweenPulsesRPM > (prevperiod * 1.6)){
         PulseCounterRPM++; 
        }

    
    PulseCounterRPM++; 
    PeriodSumRPM = PeriodSumRPM + PeriodBetweenPulsesRPM;  
  
 }  
//licznik1++;
// }

prevperiod = PeriodBetweenPulsesRPM;

//licznik1++;
}
void menu90()
{
display.clearDisplay();
display.setTextSize(1);  
display.setTextColor(WHITE);
display.setCursor(0, 10);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[32])));
  display.print(buffer);
  display.println(ratio1);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[33])));
  display.print(buffer);
  display.println(ratio2);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[34])));
  display.print(buffer);
  display.println(ratio3);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[35])));
  display.print(buffer);
  display.println(ratio4);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[36])));
  display.print(buffer);
  display.println(ratio5);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[37])));
  display.print(buffer);
  display.println(ratio6);
  display.display();
    
}

void menu110(){
display.clearDisplay();
display.setTextSize(1);  
display.setTextColor(WHITE);
display.setCursor(0, 0);
if (submenu3 == 0){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[38])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[43])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[40])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[41])));
  display.print(buffer);
  if (shiftlightON == 1) {
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.print(buffer);    
  }
  else {
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.print(buffer);     
  }
}
if (submenu3 == 1){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[38])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[39])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[44])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[41])));
  display.print(buffer);
  if (shiftlightON == 1) {
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.print(buffer);    
  }
  else {
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.print(buffer);     
  }
}
if (submenu3 == 2){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[38])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[39])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[40])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[45])));
  display.print(buffer);
  if (shiftlightON == 1) {
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.print(buffer);    
  }
  else {
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.print(buffer);     
  }
}
  display.display();



}



void menu111(){
display.clearDisplay();
display.setTextSize(1);  
display.setTextColor(WHITE); 
display.setCursor(0, 20); 

  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[43])));
  display.println(buffer);
  display.print(shiftlightStart);
  display.display();



}






void menu112(){
display.clearDisplay();
display.setTextSize(1);  
display.setTextColor(WHITE);
display.setCursor(0, 20); 

  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[44])));
  display.println(buffer);
  display.print(shiftlightEnd);
  display.display();


  
}

void menu120(){
  for (int d = 0; d <= EEPROM.length(); d++){
   EEPROM.write(d,0);  
  }
  menu = 140;
}
void menu140()
{
display.clearDisplay();
display.setTextSize(1);
display.setTextColor(WHITE);   
display.setCursor(10, 30);
strcpy_P(buffer, (char *)pgm_read_word(&(string_table[64])));
      display.print(buffer);
display.display();
delay(2000);
menu = 0;
}














//void shiftlights (){
//
//if ((prevshiftled == 0) && (shiftled == 0)){
//}
//else if ((prevshiftled == 0) && (shiftled == 1)){
//pixels.setPixelColor(0, pixels.Color(0, 200 , 0));
//pixels.show();
//prevshiftled = shiftled;
//}
//else if ((prevshiftled == 1) && (shiftled == 2)){
//pixels.setPixelColor(1, pixels.Color(100, 200 , 0));
//pixels.show();
//prevshiftled = shiftled;
//}
//else if ((prevshiftled == 2) && (shiftled == 3)){
//pixels.setPixelColor(2, pixels.Color(200, 200 , 0));
//pixels.show();
//prevshiftled = shiftled;
///}
//else if ((prevshiftled == 3) && (shiftled == 4)){
//pixels.setPixelColor(3, pixels.Color(200, 100 , 0));
//pixels.show();
//prevshiftled = shiftled;
//}
//else if ((prevshiftled == 4) && (shiftled == 5)){
//pixels.setPixelColor(4, pixels.Color(200, 0 , 0));
//pixels.show();
//prevshiftled = shiftled;
//}
//else if ((prevshiftled == 6) && (shiftled == 5)){
//pixels.setPixelColor(0, pixels.Color(0, 200 , 0));
//pixels.setPixelColor(1, pixels.Color(100, 200 , 0));
//pixels.setPixelColor(2, pixels.Color(200, 200 , 0));
//pixels.setPixelColor(3, pixels.Color(200, 100 , 0));
//pixels.setPixelColor(4, pixels.Color(200, 0 , 0));
//pixels.show();
//prevshiftled = shiftled;
//}
//else if ((prevshiftled == 5) && (shiftled == 4)){
//pixels.setPixelColor(4, pixels.Color(0, 0 , 0));
///pixels.show();
//prevshiftled = shiftled;
//}
//else if ((prevshiftled == 4) && (shiftled == 3)){
//pixels.setPixelColor(3, pixels.Color(0, 0 , 0));
//pixels.show();
//prevshiftled = shiftled;
//}
//else if ((prevshiftled == 3) && (shiftled == 2)){
//pixels.setPixelColor(2, pixels.Color(0, 0 , 0));
//pixels.show();
//prevshiftled = shiftled;
//}
//else if ((prevshiftled == 2) && (shiftled == 1)){
//pixels.setPixelColor(1, pixels.Color(0, 0 , 0));
//pixels.show();
//prevshiftled = shiftled;
//}
//else if ((prevshiftled == 1) && (shiftled == 0)){
//pixels.setPixelColor(0, pixels.Color(0, 0 , 0));
//pixels.show();
//prevshiftled = shiftled;
//}


 
//}
//void shiftblink(){
//if (shiftlightBlink == 0){
//pixels.clear();
//  pixels.show();
//shiftlightBlink = 1;
//prevshiftled = shiftled;
//}

//else if(shiftlightBlink == 1){  
//pixels.setPixelColor(0, pixels.Color(0, 0 , 200));
//pixels.setPixelColor(1, pixels.Color(0, 0 , 200));
//pixels.setPixelColor(2, pixels.Color(0, 0 , 200));
//pixels.setPixelColor(3, pixels.Color(0, 0 , 200));
//pixels.setPixelColor(4, pixels.Color(0, 0 , 200));
//pixels.show();
//shiftlightBlink = 0;
//prevshiftled = shiftled;
//}
//  
//}







//  licznik ++;
//}  // End of Pulse_Event. 

void menu200(){
display.clearDisplay();
display.setTextSize(1);  
display.setTextColor(WHITE);
display.setCursor(0, 25);

if (submenu8 == 0){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[69])));
  display.print(buffer);
    if (curentsensor == 0){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
  else if (curentsensor == 1){  
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);  
  }
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[72])));
  display.println(buffer);
}
else if (submenu8 == 1){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[70])));
  display.print(buffer);
      if (curentsensor == 0){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
  else if (curentsensor == 1){  
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);  
  }
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[71])));
  display.println(buffer);

  
}


  
   display.display();


  
}


void menu220(){
display.clearDisplay();
display.setTextSize(1);  
display.setTextColor(WHITE);
display.setCursor(0, 25);

if (submenu9 == 0){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[73])));
  display.print(buffer);
  if (tpsinput == 0){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
  else if (tpsinput == 1){  
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);  
  }
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[75])));
  display.println(buffer);
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[82])));
  display.println(buffer);


  
}
else if (submenu9 == 1){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[74])));
  display.print(buffer);
    if (tpsinput == 0){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
  else if (tpsinput == 1){  
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);  
  }
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[76])));
  display.println(buffer);
  
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[82])));
  display.println(buffer);

  
}
else if (submenu9 == 2){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[74])));
  display.print(buffer);
    if (tpsinput == 0){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[5])));
  display.println(buffer);
  }
  else if (tpsinput == 1){  
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[4])));
  display.println(buffer);  
  }
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[75])));
  display.println(buffer);
  
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[81])));
  display.println(buffer);

  
}




  
   display.display();






  
}

void menu201(){
  
display.clearDisplay();
display.setTextSize(1);
display.setTextColor(WHITE);   
display.setCursor(10, 30);
display.print(offset);
display.display();
}


void menu222(){
display.clearDisplay();
display.setTextSize(1);
display.setTextColor(WHITE);   
display.setCursor(10, 30);

if (submenu7 == 0){
  display.print(multilow);
}
else if (submenu7 == 1){
  display.print(multimid);
}
else if (submenu7 == 2){
  display.print(multihigh);
}
display.display();
}

void menu221(){
 display.clearDisplay();
display.setTextSize(1);
display.setTextColor(WHITE);   
display.setCursor(0, 30);

if (submenu7 == 0){
  strcpy_P(buffer, (char *)pgm_read_word(&(string_table[83])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[86])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[88])));
  display.println(buffer);

 
}
else if (submenu7 == 1){
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[84])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[85])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[88])));
  display.println(buffer);
  
}
else if (submenu7 == 2){
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[84])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[86])));
  display.println(buffer);
    strcpy_P(buffer, (char *)pgm_read_word(&(string_table[87])));
  display.println(buffer);
 


 
}
display.display();
}




void bluetooth(){
byte BTrecive;
BTrecive = Serial2.read();
  //Serial.print("reciving: ");
  //Serial.println(BTrecive);
switch (BTrecive){
//if (BTrecive == 1){       // main menu data
case 1:
  Serial2.print("D");
  Serial2.print("|");
  Serial2.print(averageRPM1);
  Serial2.print("|");
  Serial2.print(stanham);
  Serial2.print("|");
  Serial2.print(stansetspeed);
  Serial2.print("|");
  Serial2.print(stancancel);
  Serial2.print("|");
  Serial2.print(curentdrow);
  Serial2.print("|");
  Serial2.print(curentlimit);
  Serial2.print("|");
  Serial2.println(shifttime);
  break;
//  Serial.print(proportional);
//  Serial.print("|");
//  Serial.print(integral);
//  Serial.print("|");
//  Serial.print(derivative);
//  Serial.print("|");  
//}
//else if (BTrecive == 2){      //cruise data
case 2:
  Serial2.print("C");
  Serial2.print("|");
  Serial2.print(Kph);
  Serial2.print("|");
  Serial2.print(Kih);
  Serial2.print("|");
  Serial2.print(Kdh);
  Serial2.print("|");
  Serial2.print(Kpl);
  Serial2.print("|");
  Serial2.print(Kil);
  Serial2.print("|");
  Serial2.print(Kdl);
  Serial2.print("|");
  Serial2.print(multilow);
  Serial2.print("|");
  Serial2.print(multimid);
  Serial2.print("|");
  Serial2.print(multihigh);
  Serial2.print("|");
  Serial2.println(speedvstpssetup);
 // Serial2.println("|");      
  break;
//



//}
//else if (BTrecive == 3){        //shiftlight setup
case 3:
    Serial2.print("S");
    Serial2.print("|");
    Serial2.print(shiftlightStart);
    Serial2.print("|");
    Serial2.print(shiftlightEnd);
    Serial2.print("|");
    Serial2.println(shiftlightON);
    //Serial2.println("|");
        
    break;
//}
case 4:
  Serial2.print("Q");
  Serial2.print("|");
  Serial2.print(gearRatioSet);
  Serial2.print("|");
  //if (gearRatioSet == 0){
    
    for (int i = 0; i <= 4; i ++){
      Serial2.print(shifttimearray[0][i]);
      Serial2.print("|"); 
    } 
  //}
  // else if (gearRatioSet == 1){
    for (int i = 0; i <= 4; i ++){
      Serial2.print(shifttimearray[1][i]);
      Serial2.print("|"); 
    }
    for (int i = 0; i <= 4; i ++){
      Serial2.print(shifttimearray[2][i]);
      Serial2.print("|"); 
    }    
   //}
   Serial2.println(QSon);
   break;
   
case 5:
  Serial2.print("G");
  Serial2.print("|");
  Serial2.print(ratio1);
  Serial2.print("|");
  Serial2.print(ratio2);
  Serial2.print("|");
  Serial2.print(ratio3);
  Serial2.print("|");
  Serial2.print(ratio4);
  Serial2.print("|");
  Serial2.print(ratio5);
  Serial2.print("|");
  Serial2.print(ratio6);
  Serial2.print("|");
  Serial2.println(gearDisplay);
//  Serial2.println("|");
  
break;
case 6:
Serial2.print("R");
Serial2.print("|");
  Serial2.print(red1);
  Serial2.print("|");
  Serial2.print(green1);
  Serial2.print("|");
  Serial2.print(blue1);
  Serial2.print("|");
  Serial2.print(red2);
  Serial2.print("|");
  Serial2.print(green2);
  Serial2.print("|");
  Serial2.print(blue2);
  Serial2.print("|");
  Serial2.print(red3);
  Serial2.print("|");
  Serial2.print(green3);
  Serial2.print("|");
  Serial2.print(blue3);
  Serial2.print("|");
  Serial2.print(red4);
  Serial2.print("|");
  Serial2.print(green4);
  Serial2.print("|");
  Serial2.print(blue4);
  Serial2.print("|");
  Serial2.print(red5);
  Serial2.print("|");
  Serial2.print(green5);
  Serial2.print("|");
  Serial2.print(blue5);
  Serial2.print("|");
  Serial2.print(rend);
  Serial2.print("|");
  Serial2.print(gend);
  Serial2.print("|");
  Serial2.println(bend);
//  Serial2.println("|");
break;
case 7:
Serial2.print("T");
Serial2.print("|");
Serial2.print(tpsinput);
Serial2.print("|");
Serial2.print(curentsensor);
Serial2.print("|");
Serial2.print(offset);
Serial2.print("|");
Serial2.print(krancowka);
Serial2.print("|");
Serial2.print(curentTreshholdarray[0]);
Serial2.print("|");
Serial2.print(curentTreshholdarray[1]);
Serial2.print("|");
Serial2.print(curentTreshholdarray[2]);
Serial2.print("|");
Serial2.print(curentTreshholdarray[3]);
Serial2.print("|");
Serial2.print(curentTreshholdarray[4]);
Serial2.print("|");
Serial2.print(curentTreshholdarray[5]);
Serial2.print("|");
Serial2.print(curentTreshholdarray[6]);
Serial2.print("|");
Serial2.print(curentTreshholdarray[7]);
Serial2.print("|");
Serial2.print(curentTreshholdarray[8]);
Serial2.print("|");
Serial2.print(curentTreshholdarray[9]);
Serial2.print("|");
Serial2.print(curentTreshholdarray[10]);
Serial2.print("|");
Serial2.println(curentTreshholdarray[11]);
//Serial2.println("|");


break;
case 8:
Serial2.print("L");
Serial2.print("|");
Serial2.println(averageRPM1);
//Serial2.println("|");

break;
case 9:
Serial2.print("W");
Serial2.print("|");
Serial2.print(PulsesPerRevolution);
Serial2.print("|");
Serial2.println(wheeldiameter);


break;


case 10:
Kph = Kph + 0.01;
break;
case 11:
Kih = Kih + 0.01;
break;
case 12:
Kdh = Kdh + 0.01;
break;
case 13:
Kph = Kph - 0.01;
break;
case 14:
Kih = Kih - 0.01;
break;
case 15:
Kdh = Kdh - 0.01;
break;
case 16:
multilow = multilow + 0.01;
break;
case 17:
multimid = multimid + 0.01;
break;
case 18:
multihigh = multihigh + 0.01;
break;
case 19:
multilow = multilow - 0.01;
break;
case 20:
multimid = multimid - 0.01;
break;
case 21:
multihigh = multihigh - 0.01;
break;
case 22:
speedvstpssetupON = 1;
speedvstpssetup = 0;
break;
case 23:
speedvstpssetup = 0;
tpsspeedarray[0] = 0;
tpsspeedarray[1] = 0;
tpsspeedarray[2] = 0;
tpsspeedarray[3] = 0;
tpsspeedarray[4] = 0;
break;
case 24:
      for (int t = 0; t <= 4; t++){
        EEPROM.put(tpslicznik, tpsspeedarray[t]);
        tpslicznik = tpslicznik +2;          
      }
      tpslicznik = 186;
    EEPROM.put(0, Kph);
    EEPROM.put(4, Kih);
    EEPROM.put(8, Kdh);
    EEPROM.put(12, Kpl);
    EEPROM.put(16, Kil);
    EEPROM.put(20, Kdl);
    EEPROM.put(195, multilow);
    EEPROM.put(199, multimid);
    EEPROM.put(203, multihigh);

break;
case 25:
Kpl = Kpl + 0.01;
break;
case 26:
Kil = Kil + 0.01;
break;
case 27:
Kdl = Kdl + 0.01;
break;
case 28:
Kpl = Kpl - 0.01;
break;
case 29:
Kil = Kil - 0.01;
break;
case 30:
Kdl = Kdl - 0.01;
break;
case 31:
PulsesPerRevolution = PulsesPerRevolution +1;
break;
case 32:
PulsesPerRevolution = PulsesPerRevolution -1;
break;
case 33:
delay(100);
wheeldiameter = Serial2.parseFloat();
break;
case 34:
EEPROM.put(30, PulsesPerRevolution);
EEPROM.put(207, wheeldiameter);

/////////////////////////save speed setup
break;


case 35:
if (shiftlightON == 0){
  shiftlightON = 1;
}
else if (shiftlightON == 1){
  shiftlightON = 0;
}
break;
case 36:
/////////////////////////shiftlight save data.
EEPROM.put(77, shiftlightStart);
EEPROM.put(81, shiftlightEnd);
EEPROM.put(73, shiftlightON);


break;
case 37:
shiftlightStart = shiftlightStart + 100;
break;
case 38:
shiftlightStart = shiftlightStart - 100;
break;
case 39:
shiftlightEnd = shiftlightEnd + 100;
break;
case 40:
shiftlightEnd = shiftlightEnd - 100;
break;
case 41:
rgbsetupON = 1;
break;
case 42:
saveRGB = 1;
led1setupON = 0;
led2setupON = 0;
led3setupON = 0;
led4setupON = 0;
led5setupON = 0;
ledendsetupON = 0;
break;
case 43:
delay(100);
red1 = Serial2.read();
green1 = Serial2.read();
blue1 = Serial2.read();
Serial.println(red1);
Serial.println(green1);
Serial.println(blue1);
led1setupON = 1;
led2setupON = 0;
led3setupON = 0;
led4setupON = 0;
led5setupON = 0;
ledendsetupON = 0;
ledDataSent = 0;
break;
case 44:
delay(100);
red2 = Serial2.read();
green2 = Serial2.read();
blue2 = Serial2.read();
Serial.println(red2);
Serial.println(green2);
Serial.println(blue2);
led1setupON = 0;
led2setupON = 1;
led3setupON = 0;
led4setupON = 0;
led5setupON = 0;
ledendsetupON = 0;
ledDataSent = 0;
break;
case 45:
delay(100);
red3 = Serial2.read();
green3 = Serial2.read();
blue3 = Serial2.read();
led1setupON = 0;
led2setupON = 0;
led3setupON = 1;
led4setupON = 0;
led5setupON = 0;
ledendsetupON = 0;
ledDataSent = 0;
break;
case 46:
delay(100);
red4 = Serial2.read();
green4 = Serial2.read();
blue4 = Serial2.read();
led1setupON = 0;
led2setupON = 0;
led3setupON = 0;
led4setupON = 1;
led5setupON = 0;
ledendsetupON = 0;
ledDataSent = 0;
break;
case 47:
delay(100);
red5 = Serial2.read();
green5 = Serial2.read();
blue5 = Serial2.read();
led1setupON = 0;
led2setupON = 0;
led3setupON = 0;
led4setupON = 0;
led5setupON = 1;
ledendsetupON = 0;
ledDataSent = 0;
break;
case 48:
delay(100);
rend = Serial2.read();
gend = Serial2.read();
bend = Serial2.read();
led1setupON = 0;
led2setupON = 0;
led3setupON = 0;
led4setupON = 0;
led5setupON = 0;
ledendsetupON = 1;
ledDataSent = 0;
break;
case 49:
shifttimearray[0][0] = shifttimearray[0][0] + 1;
break;
case 50:
shifttimearray[1][0] = shifttimearray[1][0] + 1;
break;
case 51:
shifttimearray[2][0] = shifttimearray[2][0] + 1;
break;
case 52:
shifttimearray[0][0] = shifttimearray[0][0] - 1;
break;
case 53:
shifttimearray[1][0] = shifttimearray[1][0] - 1;
break;
case 54:
shifttimearray[2][0] = shifttimearray[2][0] - 1;
break;
case 55:
shifttimearray[0][1] = shifttimearray[0][1] + 1;
break;
case 56:
shifttimearray[1][1] = shifttimearray[1][1] + 1;
break;
case 57:
shifttimearray[2][1] = shifttimearray[2][1] + 1;
break;
case 58:
shifttimearray[0][1] = shifttimearray[0][1] - 1;
break;
case 59:
shifttimearray[1][1] = shifttimearray[1][1] - 1;
break;
case 60:
shifttimearray[2][1] = shifttimearray[2][1] - 1;
break;
case 61:
shifttimearray[0][2] = shifttimearray[0][2] + 1;
break;
case 62:
shifttimearray[1][2] = shifttimearray[1][2] + 1;
break;
case 63:
shifttimearray[2][2] = shifttimearray[2][2] + 1;
break;
case 64:
shifttimearray[0][2] = shifttimearray[0][2] - 1;
break;
case 65:
shifttimearray[1][2] = shifttimearray[1][2] - 1;
break;
case 66:
shifttimearray[2][2] = shifttimearray[2][2] - 1;
break;
case 67:
shifttimearray[0][3] = shifttimearray[0][3] + 1;
break;
case 68:
shifttimearray[1][3] = shifttimearray[1][3] + 1;
break;
case 69:
shifttimearray[2][3] = shifttimearray[2][3] + 1;
break;
case 70:
shifttimearray[0][3] = shifttimearray[0][3] - 1;
break;
case 71:
shifttimearray[1][3] = shifttimearray[1][3] - 1;
break;
case 72:
shifttimearray[2][3] = shifttimearray[2][3] - 1;
break;
case 73:
shifttimearray[0][4] = shifttimearray[0][4] + 1;
break;
case 74:
shifttimearray[1][4] = shifttimearray[1][4] + 1;
break;
case 75:
shifttimearray[2][4] = shifttimearray[2][4] + 1;
break;
case 76:
shifttimearray[0][4] = shifttimearray[0][4] - 1;
break;
case 77:
shifttimearray[1][4] = shifttimearray[1][4] - 1;
break;
case 78:
shifttimearray[2][4] = shifttimearray[2][4] - 1;
break;
case 79:
////////////////save quickshifter
for (int i = 0; i <= 2; i++){
    
  for(int a = 0; a <= 4; a++){
  EEPROM.put(licznikeeprom, shifttimearray[i][a]);
  licznikeeprom = licznikeeprom + 4;
}
}
licznikeeprom = 85;
if (QSon == 1){
  EEPROM.put (24, 1);
}
else if (QSon == 0){
  EEPROM.put (24, 0);
}

break;
case 80:
if (QSon == 1){
  QSon = 0;
}
else if (QSon == 0){
  QSon = 1;
}
break;
case 81:
if (gearDisplay == 1){
  gearDisplay = 0;
  EEPROM.put(63, gearDisplay);
}
else if (gearDisplay == 0){
  gearDisplay = 1;
  EEPROM.put(63, gearDisplay);
}

break;
case 82:        
EEPROM.put(170, offset);
break;
case 83:
if (tpsinput == 1){
  tpsinput = 0;
  EEPROM.put(182, tpsinput);
}
else if (tpsinput == 0){
  tpsinput = 1;
  EEPROM.put(182, tpsinput);
}
break;
case 84:
if (curentsensor == 1){
  curentsensor = 0;
  EEPROM.put(183, curentsensor);
}
else if (curentsensor == 0){
  curentsensor = 1;
  EEPROM.put(183, curentsensor);
}
break;

  
}
}
  ///////////////////////////////////////////END of program/////////////////////////////////////////
